allow_embedding: false
config:
  client: {}
  server: {}
correct_dependency_ids: {}
db_schema:
  files:
    client: none
    columns:
    - admin_ui: {order: 0, width: 200}
      name: path
      type: string
    - admin_ui: {order: 1, width: 200}
      name: file
      type: media
    - admin_ui: {order: 2, width: 200}
      name: file_version
      type: string
    server: full
    title: Files
  indiv_info:
    client: full
    columns:
    - admin_ui: {order: 0, width: 200}
      name: indiv_country
      type: string
    - admin_ui: {order: -1, width: 200}
      name: indiv_name
      type: string
    - admin_ui: {order: 3, width: 200}
      name: indiv_age
      type: string
    - admin_ui: {order: 4, width: 200}
      name: indiv_marital
      type: string
    - admin_ui: {order: 5, width: 200}
      name: indiv_education
      type: string
    - admin_ui: {order: 6, width: 200}
      name: indiv_employment
      type: string
    - admin_ui: {order: 7, width: 200}
      name: indiv_initial
      type: string
    - admin_ui: {order: 3.5, width: 200}
      name: indiv_sex
      type: string
    - admin_ui: {order: 8, width: 200}
      name: indiv_adjusted
      type: string
    server: full
    title: Indiv_Info
  money_values:
    client: full
    columns:
    - admin_ui: {order: 0, width: 200}
      name: housing
      type: string
    - admin_ui: {order: 1, width: 200}
      name: transport
      type: string
    - admin_ui: {order: 2, width: 200}
      name: nutrition
      type: string
    - admin_ui: {order: 3, width: 200}
      name: clothing
      type: string
    - admin_ui: {order: 4, width: 200}
      name: laundry
      type: string
    - admin_ui: {order: 5, width: 200}
      name: childcare
      type: string
    - admin_ui: {order: 6, width: 200}
      name: adultcare
      type: string
    - admin_ui: {order: 7, width: 200}
      name: voluntaryactivity
      type: string
    server: full
    title: Money_Values
  pop_info:
    client: full
    columns:
    - admin_ui: {order: 0.25, width: 200}
      name: pop_age
      type: string
    - admin_ui: {order: -1, width: 200}
      name: pop_country
      type: string
    - admin_ui: {order: 1, width: 200}
      name: pop_intervention_name
      type: string
    - admin_ui: {order: 4.5, width: 200}
      name: pop_number
      type: number
    - admin_ui: {order: 5.5, width: 200}
      name: pop_initialgood
      type: string
    - admin_ui: {order: 6.5, width: 200}
      name: pop_initialfair
      type: string
    - admin_ui: {order: 7.5, width: 200}
      name: pop_initialpoor
      type: string
    - admin_ui: {order: 8.5, width: 200}
      name: pop_adjustedgood
      type: string
    - admin_ui: {order: 9.5, width: 200}
      name: pop_adjustedfair
      type: string
    - admin_ui: {order: 10.5, width: 200}
      name: pop_adjustedpoor
      type: string
    server: full
    title: Pop_Info
  pop_money_values:
    client: full
    columns:
    - admin_ui: {order: 0, width: 200}
      name: childcare
      type: string
    - admin_ui: {order: 1, width: 200}
      name: clothing
      type: string
    - admin_ui: {order: 2, width: 200}
      name: employment
      type: string
    - admin_ui: {order: 3, width: 200}
      name: hobbiescomputing
      type: string
    - admin_ui: {order: 4, width: 200}
      name: housing
      type: string
    - admin_ui: {order: 5, width: 200}
      name: laundry
      type: string
    - admin_ui: {order: 6, width: 200}
      name: massmedia
      type: string
    - admin_ui: {order: 7, width: 200}
      name: nutrition
      type: string
    - admin_ui: {order: 8, width: 200}
      name: paticipatoryactivities
      type: string
    - admin_ui: {order: 9, width: 200}
      name: personalcare
      type: string
    - admin_ui: {order: 10, width: 200}
      name: sociallifeentertainment
      type: string
    - admin_ui: {order: 11, width: 200}
      name: sportsoutdoor
      type: string
    - admin_ui: {order: 12, width: 200}
      name: study
      type: string
    - admin_ui: {order: 13, width: 200}
      name: transport
      type: string
    - admin_ui: {order: 14, width: 200}
      name: voluntary
      type: string
    server: full
    title: Pop_Money_Values
dependencies: []
dependency_code: {}
dependency_ids: {}
dependency_order: []
exported_table_schema:
- client: none
  columns:
    ZFVT4gJ4OJ4=:
      admin_ui: {order: 1, width: 200}
      name: file
      type: media
    oasFTKlC0_0=:
      admin_ui: {order: 2, width: 200}
      name: file_version
      type: string
    ynVFJziX+tg=:
      admin_ui: {order: 0, width: 200}
      name: path
      type: string
  id: 872615
  name: Files
  python_name: files
  server: full
- client: full
  columns:
    1G9UnZB4Tjk=:
      admin_ui: {order: 1, width: 200}
      name: indiv_country
      type: string
    8Xiifry_sNM=:
      admin_ui: {order: 3, width: 200}
      name: indiv_sex
      type: string
    GM2efbCTPNU=:
      admin_ui: {order: 4, width: 200}
      name: indiv_marital
      type: string
    U7uh7ExiWgY=:
      admin_ui: {order: 8, width: 200}
      name: indiv_adjusted
      type: string
    YqsDgSRAec8=:
      admin_ui: {order: 5, width: 200}
      name: indiv_education
      type: string
    dTEbGNeaqGk=:
      admin_ui: {order: 2, width: 200}
      name: indiv_age
      type: string
    jzQnj4zhQLc=:
      admin_ui: {order: 7, width: 200}
      name: indiv_initial
      type: string
    rw+sjhKvXu0=:
      admin_ui: {order: 0, width: 200}
      name: indiv_name
      type: string
    yzEATyNq7V0=:
      admin_ui: {order: 6, width: 200}
      name: indiv_employment
      type: string
  id: 872616
  name: Indiv_Info
  python_name: indiv_info
  server: full
- client: full
  columns:
    15iXOWpZdTw=:
      admin_ui: {order: 5, width: 200}
      name: childcare
      type: string
    C6ShtQZwysw=:
      admin_ui: {order: 0, width: 200}
      name: housing
      type: string
    N5TioB0tWZk=:
      admin_ui: {order: 4, width: 200}
      name: laundry
      type: string
    P8_tmbNDzqM=:
      admin_ui: {order: 1, width: 200}
      name: transport
      type: string
    UUKmoUdwPDY=:
      admin_ui: {order: 2, width: 200}
      name: nutrition
      type: string
    r_gF05HsgII=:
      admin_ui: {order: 3, width: 200}
      name: clothing
      type: string
    uuGklxKReIY=:
      admin_ui: {order: 6, width: 200}
      name: adultcare
      type: string
    xOjgaDo5W3U=:
      admin_ui: {order: 7, width: 200}
      name: voluntaryactivity
      type: string
  id: 872617
  name: Money_Values
  python_name: money_values
  server: full
- client: full
  columns:
    TlS6pErps2c=:
      admin_ui: {order: 0, width: 200}
      name: pop_country
      type: string
    WGgaYmHWjNw=:
      admin_ui: {order: 1, width: 200}
      name: pop_age
      type: string
    ZFp_+u1ZAV4=:
      admin_ui: {order: 8, width: 200}
      name: pop_adjustedfair
      type: string
    gDB3z2ewUaA=:
      admin_ui: {order: 3, width: 200}
      name: pop_number
      type: number
    jD7d5PrILNY=:
      admin_ui: {order: 5, width: 200}
      name: pop_initialfair
      type: string
    mZ0Flplye8I=:
      admin_ui: {order: 2, width: 200}
      name: pop_intervention_name
      type: string
    st2IyOokOs8=:
      admin_ui: {order: 9, width: 200}
      name: pop_adjustedpoor
      type: string
    szTOIEeYSBc=:
      admin_ui: {order: 4, width: 200}
      name: pop_initialgood
      type: string
    ws6UF1_iMQY=:
      admin_ui: {order: 6, width: 200}
      name: pop_initialpoor
      type: string
    zPV+mRdhJxI=:
      admin_ui: {order: 7, width: 200}
      name: pop_adjustedgood
      type: string
  id: 872618
  name: Pop_Info
  python_name: pop_info
  server: full
- client: full
  columns:
    2dqLBPypDaM=:
      admin_ui: {order: 11, width: 200}
      name: sportsoutdoor
      type: string
    3rGFTygQX6w=:
      admin_ui: {order: 9, width: 200}
      name: personalcare
      type: string
    CphYPhGap4c=:
      admin_ui: {order: 14, width: 200}
      name: voluntary
      type: string
    F3KfdECeE0o=:
      admin_ui: {order: 13, width: 200}
      name: transport
      type: string
    KxJc3PNisbU=:
      admin_ui: {order: 1, width: 200}
      name: clothing
      type: string
    OnLFyiNsQG4=:
      admin_ui: {order: 5, width: 200}
      name: laundry
      type: string
    P3rK0ZsTMCk=:
      admin_ui: {order: 8, width: 200}
      name: paticipatoryactivities
      type: string
    QRCwi39VRpg=:
      admin_ui: {order: 7, width: 200}
      name: nutrition
      type: string
    TxIKRVz9MrA=:
      admin_ui: {order: 12, width: 200}
      name: study
      type: string
    VelhpIM9GO4=:
      admin_ui: {order: 0, width: 200}
      name: childcare
      type: string
    ZvKHe0YfnIA=:
      admin_ui: {order: 4, width: 200}
      name: housing
      type: string
    ivwJk1UP02w=:
      admin_ui: {order: 3, width: 200}
      name: hobbiescomputing
      type: string
    mSzY43NggXc=:
      admin_ui: {order: 10, width: 200}
      name: sociallifeentertainment
      type: string
    nYpO0GhsYIs=:
      admin_ui: {order: 2, width: 200}
      name: employment
      type: string
    ro8qTR35AEA=:
      admin_ui: {order: 6, width: 200}
      name: massmedia
      type: string
  id: 872619
  name: Pop_Money_Values
  python_name: pop_money_values
  server: full
extra_files: {LICENSE.txt: TUlUIExpY2Vuc2UKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKU09GVFdBUkUu, __init__.py: IwojIFRoaXMgcmVwb3NpdG9yeSBpcyBhbiBBbnZpbCBhcHAuIExlYXJuIG1vcmUgYXQgaHR0cHM6Ly9hbnZpbC53b3Jrcy8KIyBUbyBydW4gdGhlIHNlcnZlci1zaWRlIGNvZGUgb24geW91ciBvd24gbWFjaGluZSwgcnVuOgojIHBpcCBpbnN0YWxsIGFudmlsLXVwbGluawojIHB5dGhvbiAtbSBhbnZpbC5ydW5fYXBwX3ZpYV91cGxpbmsgWW91ckFwcFBhY2thZ2VOYW1lCgpfX3BhdGhfXyA9IFtfX3BhdGhfX1swXSArICIvc2VydmVyX2NvZGUiLCBfX3BhdGhfX1swXSArICIvY2xpZW50X2NvZGUiXQo=}
forms:
- class_name: Homepage
  code: "from ._anvil_designer import HomepageTemplate\nfrom anvil import *\nimport plotly.graph_objects as go\nimport anvil.server\nfrom anvil.designer import in_designer\nimport anvil.tables as tables\nimport anvil.tables.query as q\nfrom anvil.tables import app_tables\nimport anvil.media\nfrom ..Indiv_Money_Value import Indiv_Money_Value\n\n\nclass Homepage(HomepageTemplate):\n  def __init__(self, **properties):\n    defaults = anvil.server.call(\"initialize_defaults\")\n    self.indiv_money_values = defaults[\"indiv_money_values\"]\n    self.pop_money_values = defaults[\"pop_money_values\"]\n    # Continue other initializations as before\n    # app_tables.money_values.delete_all_rows()\n    # app_tables.money_values.add_row(\n    #     housing=\"22.77\",\n    #     transport=\"8.34\",\n    #     nutrition=\"5.26\",\n    #     clothing=\"1.35\",\n    #     laundry=\"18.17\",\n    #     childcare=\"7.25\",\n    #     adultcare=\"6.60\",\n    #     voluntaryactivity=\"17.20\",\n    # )\n    # app_tables.pop_money_values.delete_all_rows()\n    # app_tables.pop_money_values.add_row(\n    #     childcare=\"15.4\",\n    #     clothing=\"3.56\",\n    #     employment=\"0.91\",\n    #     hobbiescomputing=\"3.2\",\n    #     housing=\"4.9\",\n    #     laundry=\"4.46\",\n    #     massmedia=\"11.63\",\n    #     nutrition=\"15.4\",\n    #     paticipatoryactivities=\"3.56\",\n    #     personalcare=\"0.91\",\n    #     sociallifeentertainment=\"4.9\",\n    #     sportsoutdoor=\"5.46\",\n    #     study=\"4.46\",\n    #     transport=\"11.63\",\n    #     voluntary=\"11.6\",\n    # )\n    self.initialgood_slider.level = 0\n    self.initialfair_slider.level = 0\n    self.initialpoor_slider.level = 0\n    self.adjustedgood_slider.level = 0\n    self.adjustedfair_slider.level = 0\n    self.adjustedpoor_slider.level = 0\n    self.item[\"pop_initialgood\"] = 0\n    self.item[\"pop_initialfair\"] = 0\n    self.item[\"pop_initialpoor\"] = 0\n    self.item[\"pop_adjustedgood\"] = 0\n    self.item[\"pop_adjustedfair\"] = 0\n    self.item[\"pop_adjustedpoor\"] = 0\n    self.alert_shown = False\n    self.initialgood_slider.visible = False\n    self.adjustedgood_slider.visible = False\n    self.initialpoor_number.foreground = \"black\"\n    self.initialfair_number.foreground = \"black\"\n    self.initialgood_number.foreground = \"black\"\n    self.adjustedpoor_number.foreground = \"black\"\n    self.adjustedfair_number.foreground = \"black\"\n    self.adjustedgood_number.foreground = \"black\"\n    self.initialgood_number.text = 100\n    self.initialfair_number.text = 0\n    self.initialpoor_number.text = 0\n    self.adjustedgood_number.text = 100\n    self.adjustedfair_number.text = 0\n    self.adjustedpoor_number.text = 0\n    # self.initialgood_slider.enabled = False\n    # self.adjustedgood_slider.enabled = False\n\n  def reset_money_values_to_default(self):\n        \"\"\"Resets money values to their default states in the server session.\"\"\"\n        anvil.server.call_s(\"initialize_indiv_money_values\")  # Reset individual values\n        anvil.server.call_s(\"initialize_pop_money_values\")    # Reset population values\n    \n  def call_initialize_money_values(self):\n    \"\"\"Call initialization functions asynchronously.\"\"\"\n    anvil.server.call_s(\"initialize_indiv_money_values\")\n    anvil.server.call_s(\"initialize_pop_money_values\")\n\n  # ----------------------------------------------------------------------------------------------------------------------------------------------------\n  # Individual Code Below\n  # ----------------------------------------------------------------------------------------------------------------------------------------------------\n  def indiv_button_click(self, **event_args):\n    \"\"\"This method is called when the button is clicked\"\"\"\n    self.individual_homepage.visible = True\n    self.selection_homepage.visible = False\n\n  def indiv_run_sim_button_click(self, **event_args):\n    \"\"\"This method is called when the button is clicked\"\"\"\n    # indiv_variables= {}\n    self.individual_visual_homepage.visible = True\n    # app_tables.indiv_info.delete_all_rows()\n    # app_tables.indiv_info.add_row(\n    #   indiv_name=str(self.item[\"indiv_name\"]),\n    #   indiv_country=str(self.item[\"indiv_country\"]),\n    #   indiv_age=str(self.item[\"indiv_age\"]),\n    #   indiv_sex=str(self.item[\"indiv_sex\"]),\n    #   indiv_marital=str(self.item[\"indiv_marital\"]),\n    #   indiv_employment=str(self.item[\"indiv_employment\"]),\n    #   indiv_education=str(self.item[\"indiv_education\"]),\n    #   indiv_initial=str(self.item[\"indiv_initial\"]),\n    #   indiv_adjusted=str(self.item[\"indiv_adjusted\"]),\n    # )\n    indiv_user_selections = {\n      \"indiv_name\": self.indiv_name.text,\n      \"indiv_country\": self.indiv_country_dd.selected_value,\n      \"indiv_age\": self.indiv_age_dd.selected_value,\n      \"indiv_sex\": self.indiv_sex_dd.selected_value,\n      \"indiv_marital\": self.indiv_marital_dd.selected_value,\n      \"indiv_employment\": self.indiv_employment_dd.selected_value,\n      \"indiv_education\": self.indiv_education_dd.selected_value,\n      \"indiv_initial\": self.indiv_initial_dd.selected_value,\n      \"indiv_adjusted\": self.indiv_adjusted_dd.selected_value,\n    }\n    anvil.server.call(\"store_user_selection\", indiv_user_selections)\n    print(\"SEND TO SERVER SELECTIONS\")\n    print(indiv_user_selections)\n    anvil.server.call(\"run_indiv_code\")\n    anvil.server.call(\"process_user_selection_data\")\n    # anvil.server.call('run_indiv_code')\n    self.indiv_initial_time_plot.figure = anvil.server.call(\n      \"create_barfig_indiv_initial_time\"\n    )\n    self.indiv_adjusted_time_plot.figure = anvil.server.call(\n      \"create_barfig_indiv_adjusted_time\"\n    )\n    self.indiv_difference_time_plot.figure = anvil.server.call(\n      \"create_barfig_indiv_difference_time\"\n    )\n    self.indiv_combo_time_plot.figure = anvil.server.call(\n      \"create_barfig_indiv_combo_time\"\n    )\n    self.indiv_stacked_time_pie.figure = anvil.server.call(\n      \"create_indiv_stacked_piefig_time\"\n    )\n    self.indiv_difference_time_pie.figure = anvil.server.call(\n      \"create_indiv_difference_time_pie\"\n    )\n    self.indiv_name_1.content = anvil.server.call(\"create_indiv_name_text\")\n    self.indiv_name_2.content = anvil.server.call(\"create_indiv_name_text\")\n    self.indiv_name_3.content = anvil.server.call(\"create_indiv_name_text\")\n    self.indiv_name_4.content = anvil.server.call(\"create_indiv_name_text\")\n    self.indiv_initial_rank1.content = anvil.server.call(\"create_indiv_initial_rank\")\n    self.indiv_initial_rank2.content = anvil.server.call(\"create_indiv_initial_rank\")\n    self.indiv_adjusted_rank1.content = anvil.server.call(\"create_indiv_adjusted_rank\")\n    self.indiv_adjusted_rank2.content = anvil.server.call(\"create_indiv_adjusted_rank\")\n    self.indiv_initial_value1.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_initial_value\")))\n    )\n    self.indiv_adjusted_value1.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_adjusted_value\")))\n    )\n    self.indiv_difference_value1.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_difference_value\")))\n    )\n    self.indiv_initial_value_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_initial_value\")))\n    )\n    self.indiv_adjusted_value_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_adjusted_value\")))\n    )\n    self.indiv_difference_value_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_difference_value\")))\n    )\n    self.indiv_initial_time_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_initial_time\")))\n    )\n    self.indiv_adjusted_time_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_adjusted_time\")))\n    )\n    self.indiv_difference_time_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_difference_time\")))\n    )\n    self.indiv_initial_moneytime_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_initial_time_money\")))\n    )\n    self.indiv_adjusted_moneytime_box.content = \"{:,}\".format(\n      int(float(anvil.server.call(\"create_indiv_adjusted_time_money\")))\n    )\n    self.indiv_difference_moneytime_box.content = \"{:,}\".format(\n      int(float(int(anvil.server.call(\"create_indiv_difference_time_money\"))))\n    )\n\n  def indiv_education_dd_change(self, **event_args):\n    \"\"\"This method is called when an item is selected\"\"\"\n    if self.indiv_country_dd.selected_value == (\n      \"United Kingdom\"\n    ) and self.indiv_education_dd.selected_value == (\"Lower Than Secondary\"):\n      alert(\n        'There is no data for people with education \"lower than secondary\" in the United Kindgom. Please choose a different country and/or education level.'\n      )\n\n  def indiv_country_dd_change(self, **event_args):\n    \"\"\"This method is called when an item is selected\"\"\"\n    if self.indiv_country_dd.selected_value == (\n      \"United Kingdom\"\n    ) and self.indiv_education_dd.selected_value == (\"Lower Than Secondary\"):\n      alert(\n        'There is no data for people with education \"lower than secondary\" in the United Kindgom. Please choose a different country and/or education level.'\n      )\n\n  def indiv_money_button_click(self, **event_args):\n        \"\"\"Open the pop-up for editing individual money values.\"\"\"\n        indiv_money_value = anvil.server.call(\"get_indiv_money_values\")\n        popup_form = Indiv_Money_Value(item=indiv_money_value)\n\n        save_clicked = alert(\n            content=popup_form,\n            title=\"Edit Monetary Value For Activities\",\n            large=True,\n            buttons=[(\"Save\", True), (\"Cancel\", False)],\n        )\n\n        if save_clicked:\n            updated_indiv_money_values = popup_form.get_updated_values()\n            anvil.server.call(\"update_indiv_money_values\", updated_indiv_money_values)\n            alert(\"Individual money values updated successfully.\")\n\n  # ----------------------------------------------------------------------------------------------------------------------------------------------------\n  # Population Code Below\n  # ----------------------------------------------------------------------------------------------------------------------------------------------------\n  def pop_button_click(self, **event_args):\n    \"\"\"This method is called when the button is clicked\"\"\"\n    self.population_homepage.visible = True\n    self.selection_homepage.visible = False\n\n  def pop_run_sim_button_click(self, **event_args):\n    \"\"\"This method is called when the button is clicked\"\"\"\n    # pop_variables= {}\n    pop_number = self.item[\"pop_number\"]\n    # app_tables.pop_info.delete_all_rows()\n    # app_tables.pop_info.add_row(\n    #   pop_country=str(self.item[\"pop_country\"]),\n    #   pop_name=str(self.item[\"pop_name\"]),\n    #   pop_age=str(self.item[\"pop_age\"]),\n    #   pop_number=(self.item[\"pop_number\"]),\n    #   pop_initialgood=str(self.item[\"pop_initialgood\"]),\n    #   pop_initialfair=str(self.item[\"pop_initialfair\"]),\n    #   pop_initialpoor=str(self.item[\"pop_initialpoor\"]),\n    #   pop_adjustedgood=str(self.item[\"pop_adjustedgood\"]),\n    #   pop_adjustedfair=str(self.item[\"pop_adjustedfair\"]),\n    #   pop_adjustedpoor=str(self.item[\"pop_adjustedpoor\"]),\n    # )\n    pop_user_selections = {\n      \"pop_intervention_name\": self.pop_intervention_name.text,\n      \"pop_country\": self.pop_country_dd.selected_value,\n      \"pop_age\": self.pop_age_dd.selected_value,\n      \"pop_number\": self.pop_number_box.text,\n      \"pop_initialgood\": self.initialgood_number.text,\n      \"pop_initialfair\": self.initialfair_number.text,\n      \"pop_initialpoor\": self.initialpoor_number.text,\n      \"pop_adjustedgood\": self.adjustedgood_number.text,\n      \"pop_adjustedfair\": self.adjustedfair_number.text,\n      \"pop_adjustedpoor\": self.adjustedpoor_number.text,\n    }\n    anvil.server.call(\"pop_store_user_selection\", pop_user_selections)\n    pop_n_value = self.pop_number_box.text\n    self.pop_visual_title_n.content = pop_n_value\n    self.population_visual_homepage.visible = True\n    self.population_visual_homepage_single.visible = True\n    anvil.server.call(\"run_pop_code\")\n    self.pop_initial_time_plot.figure = anvil.server.call(\n      \"create_barfig_pop_initial_time\"\n    )\n    self.pop_adjusted_time_plot.figure = anvil.server.call(\n      \"create_barfig_pop_adjusted_time\"\n    )\n    self.pop_difference_time_plot.figure = anvil.server.call(\n      \"create_barfig_pop_difference_time\"\n    )\n    self.pop_combo_time_plot.figure = anvil.server.call(\"create_barfig_pop_combo_time\")\n    self.pop_stacked_time_pie.figure = anvil.server.call(\n      \"create_pop_stacked_piefig_time\"\n    )\n    self.pop_initial_value_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_initial_value\"))\n    )\n    self.pop_adjusted_value_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_adjusted_value\"))\n    )\n    self.pop_difference_value_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_difference_value\"))\n    )\n    self.pop_initial_time_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_initial_time\"))\n    )\n    self.pop_adjusted_time_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_adjusted_time\"))\n    )\n    self.pop_difference_time_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_difference_time\"))\n    )\n    self.pop_initial_moneytime_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_initial_moneytime\"))\n    )\n    self.pop_adjusted_moneytime_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_adjusted_moneytime\"))\n    )\n    self.pop_difference_moneytime_box.content = \"{:,}\".format(\n      int(anvil.server.call(\"create_pop_difference_moneytime\"))\n    )\n    self.pop_initial_time_plot_single.figure = anvil.server.call(\n      \"create_barfig_pop_initial_time_single\"\n    )\n    self.pop_adjusted_time_plot_single.figure = anvil.server.call(\n      \"create_barfig_pop_adjusted_time_single\"\n    )\n    self.pop_difference_time_plot_single.figure = anvil.server.call(\n      \"create_barfig_pop_difference_time_single\"\n    )\n    self.pop_combo_time_plot_single.figure = anvil.server.call(\n      \"create_barfig_pop_combo_time_single\"\n    )\n    self.pop_stacked_time_pie_single.figure = anvil.server.call(\n      \"create_pop_stacked_piefig_time_single\"\n    )\n    self.pop_initial_value_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_initial_value\"))) / pop_number\n    )\n    self.pop_adjusted_value_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_adjusted_value\"))) / pop_number\n    )\n    self.pop_difference_value_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_difference_value\"))) / pop_number\n    )\n    self.pop_initial_time_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_initial_time\"))) / pop_number\n    )\n    self.pop_adjusted_time_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_adjusted_time\"))) / pop_number\n    )\n    self.pop_difference_time_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_difference_time\"))) / pop_number\n    )\n    self.pop_initial_moneytime_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_initial_moneytime\"))) / pop_number\n    )\n    self.pop_adjusted_moneytime_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_adjusted_moneytime\"))) / pop_number\n    )\n    self.pop_difference_moneytime_box_single.content = \"{:,}\".format(\n      (int(anvil.server.call(\"create_pop_difference_moneytime\"))) / pop_number\n    )\n\n  def update_initial_good_slider(self):\n    \"\"\"Auto-update the good slider in the initial set to ensure total is 100.\"\"\"\n    initial_total = int(float(self.initialpoor_slider.level)) + int(\n      float(self.initialfair_slider.level)\n    )\n    remaining = 100 - initial_total\n    self.initialgood_slider.level = max(0, min(remaining, 100))\n    self.initialgood_number.text = str(self.initialgood_slider.level)\n\n  def update_adjusted_good_slider(self):\n    \"\"\"Auto-update the good slider in the adjusted set to ensure total is 100.\"\"\"\n    adjusted_total = int(float(self.adjustedpoor_slider.level)) + int(\n      float(self.adjustedfair_slider.level)\n    )\n    remaining = 100 - adjusted_total\n    self.adjustedgood_slider.level = max(0, min(remaining, 100))\n    self.adjustedgood_number.text = str(self.adjustedgood_slider.level)\n\n  def initialpoor_slider_change(self, level, **event_args):\n    \"\"\"This method is called when the initial poor slider is moved\"\"\"\n    self.initialpoor_number.text = str(self.initialpoor_slider.level)\n    total = int(float(self.initialpoor_slider.level)) + int(\n      float(self.initialfair_slider.level)\n    )\n\n    if total > 100:\n      # Reset to a valid max and show alert if not already shown\n      self.initialpoor_slider.level = 100 - int(float(self.initialfair_slider.level))\n      self.initialpoor_number.text = str(self.initialpoor_slider.level)\n      if not self.alert_shown:\n        self.alert_shown = True\n        alert(\n          \"Error: Total for initial poor and fair sliders exceeds 100. Adjusted automatically.\"\n        )\n        self.alert_shown = False  # Reset flag for future alerts\n\n    self.update_initial_good_slider()\n\n  def initialfair_slider_change(self, level, **event_args):\n    \"\"\"This method is called when the initial fair slider is moved\"\"\"\n    self.initialfair_number.text = str(self.initialfair_slider.level)\n    total = int(float(self.initialpoor_slider.level)) + int(\n      float(self.initialfair_slider.level)\n    )\n\n    if total > 100:\n      # Reset to a valid max and show alert if not already shown\n      self.initialfair_slider.level = 100 - int(float(self.initialpoor_slider.level))\n      self.initialfair_number.text = str(self.initialfair_slider.level)\n      if not self.alert_shown:\n        self.alert_shown = True\n        alert(\n          \"Error: Total for initial poor and fair sliders exceeds 100. Adjusted automatically.\"\n        )\n        self.alert_shown = False  # Reset flag for future alerts\n\n    self.update_initial_good_slider()\n\n  def adjustedpoor_slider_change(self, level, **event_args):\n    \"\"\"This method is called when the adjusted poor slider is moved\"\"\"\n    self.adjustedpoor_number.text = str(self.adjustedpoor_slider.level)\n    total = int(float(self.adjustedpoor_slider.level)) + int(\n      float(self.adjustedfair_slider.level)\n    )\n\n    if total > 100:\n      # Reset to a valid max and show alert if not already shown\n      self.adjustedpoor_slider.level = 100 - int(float(self.adjustedfair_slider.level))\n      self.adjustedpoor_number.text = str(self.adjustedpoor_slider.level)\n      if not self.alert_shown:\n        self.alert_shown = True\n        alert(\n          \"Error: Total for adjusted poor and fair sliders exceeds 100. Adjusted automatically.\"\n        )\n        self.alert_shown = False  # Reset flag for future alerts\n\n    self.update_adjusted_good_slider()\n\n  def adjustedfair_slider_change(self, level, **event_args):\n    \"\"\"This method is called when the adjusted fair slider is moved\"\"\"\n    self.adjustedfair_number.text = str(self.adjustedfair_slider.level)\n    total = int(float(self.adjustedpoor_slider.level)) + int(\n      float(self.adjustedfair_slider.level)\n    )\n\n    if total > 100:\n      # Reset to a valid max and show alert if not already shown\n      self.adjustedfair_slider.level = 100 - int(float(self.adjustedpoor_slider.level))\n      self.adjustedfair_number.text = str(self.adjustedfair_slider.level)\n      if not self.alert_shown:\n        self.alert_shown = True\n        alert(\n          \"Error: Total for adjusted poor and fair sliders exceeds 100. Adjusted automatically.\"\n        )\n        self.alert_shown = False  # Reset flag for future alerts\n\n    self.update_adjusted_good_slider()\n\n  def pop_money_button_click(self, **event_args):\n        \"\"\"Open the pop-up for editing population money values.\"\"\"\n        pop_money_value = anvil.server.call(\"get_pop_money_values\")\n        popup_form = Indiv_Money_Value(item=pop_money_value)\n\n        save_clicked = alert(\n            content=popup_form,\n            title=\"Edit Monetary Value For Activities\",\n            large=True,\n            buttons=[(\"Save\", True), (\"Cancel\", False)],\n        )\n\n        if save_clicked:\n            updated_pop_money_values = popup_form.get_updated_values()\n            anvil.server.call(\"update_pop_money_values\", updated_pop_money_values)\n            alert(\"Population money values updated successfully.\")\n\n  def homepage_return_button_click(self, **event_args):\n    \"\"\"This method is called when the button is clicked\"\"\"\n    self.individual_homepage.visible = False\n    self.population_homepage.visible = False\n    self.selection_homepage.visible = True\n\n  def initialgood_number_pressed_enter(self, **event_args):\n    \"\"\"This method is called when the user presses Enter in this text box\"\"\"\n    pass\n\n  def initialfair_number_pressed_enter(self, **event_args):\n    \"\"\"This method is called when the user presses Enter in this text box\"\"\"\n    pass\n\n  def initialpoor_number_pressed_enter(self, **event_args):\n    \"\"\"This method is called when the user presses Enter in this text box\"\"\"\n    pass\n\n  def adjustedpoor_number_pressed_enter(self, **event_args):\n    \"\"\"This method is called when the user presses Enter in this text box\"\"\"\n    pass\n\n  def adjustedgood_number_pressed_enter(self, **event_args):\n    \"\"\"This method is called when the user presses Enter in this text box\"\"\"\n    pass\n\n  def adjustedfair_number_pressed_enter(self, **event_args):\n    \"\"\"This method is called when the user presses Enter in this text box\"\"\"\n    pass\n\n  def pop_number_box_lost_focus(self, **event_args):\n    \"\"\"This method is called when the TextBox loses focus.\"\"\"\n    min_value = 100  # Define the minimum value\n    # Check if the input is a number and if it meets the minimum requirement\n    try:\n      value = int(self.pop_number_box.text)\n      if value < min_value:\n        self.pop_number_box.text = str(min_value)  # Reset to minimum if below\n        alert(f\"Value cannot be less than {min_value}. Resetting to {min_value}.\")\n    except ValueError:\n      # Handle cases where the input is not a valid number\n      self.pop_number_box.text = str(min_value)\n      alert(f\"Invalid input. Resetting to minimum value of {min_value}.\")\n"
  components:
  - components:
    - components:
      - layout_properties: {grid_position: 'EODHXN,CGZZSN'}
        name: label_3
        properties: {align: center, bold: true, font_size: 22, role: title, text: Healthy Ageing Tool}
        type: Label
      - components:
        - event_bindings: {click: indiv_button_click}
          layout_properties: {grid_position: 'EIIYSU,RILHFE'}
          name: indiv_button
          properties: {foreground: '', role: filled-button, text: Individual Tool}
          type: Button
        - event_bindings: {click: pop_button_click}
          layout_properties: {grid_position: 'EIIYSU,HLHPRP'}
          name: pop_button
          properties: {foreground: '', role: filled-button, text: Population Tool}
          type: Button
        layout_properties: {grid_position: 'IHPNWD,SNPBKK'}
        name: outlined_card_1
        properties: {background: '', role: outlined-card}
        type: ColumnPanel
      layout_properties: {grid_position: 'TPGRSR,WRRBBD'}
      name: selection_homepage
      properties: {background: 'theme:Primary Container', role: outlined-card}
      type: ColumnPanel
    - components:
      - layout_properties: {grid_position: 'TBWCGO,ZABMWP'}
        name: label_3_copy
        properties: {align: center, bold: true, font_size: 22, role: title, text: Individual Level Tool}
        type: Label
      - components:
        - layout_properties: {grid_position: 'MHNJHK,NBHUCU'}
          name: label_2
          properties: {align: center, text: 'Name of Person:'}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_name'']', property: text, writeback: true}
          layout_properties: {grid_position: 'MHNJHK,BDOEJW'}
          name: indiv_name
          properties: {placeholder: Please enter a name, text: ''}
          type: TextBox
        - layout_properties: {grid_position: 'MHNJHK,UZRGZS'}
          name: label_2_copy_6
          properties: {align: center, text: Country}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_country'']', property: selected_value, writeback: true}
          event_bindings: {change: indiv_country_dd_change}
          layout_properties: {grid_position: 'MHNJHK,UHJNHL'}
          name: indiv_country_dd
          properties:
            include_placeholder: true
            items: [Belgium, Estonia, Finland, France, Greece, Romania, Serbia, United Kingdom]
          type: DropDown
        - layout_properties: {grid_position: 'XQINBJ,SLSUHB YKYADG,YRHOPR'}
          name: label_2_copy
          properties: {align: center, text: Age}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_age'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'XQINBJ,SLSUHB NSGPQN,XTNZAO'}
          name: indiv_age_dd
          properties:
            include_placeholder: true
            items: [55-64, 65-74, 75+]
          type: DropDown
        - layout_properties: {grid_position: 'XQINBJ,IVWDKP GVYIPK,VFXWBS'}
          name: label_2_copy_2
          properties: {align: center, text: Sex}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_sex'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'XQINBJ,IVWDKP SRACHF,DEAGXS'}
          name: indiv_sex_dd
          properties:
            include_placeholder: true
            items: [Male, Female]
          type: DropDown
        - layout_properties: {grid_position: 'XQINBJ,NUWALJ NFPNJR,JVTHJS'}
          name: label_2_copy_3
          properties: {align: center, text: Marital Status}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_marital'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'XQINBJ,NUWALJ ADCEHY,CAXJEB'}
          name: indiv_marital_dd
          properties:
            include_placeholder: true
            items: [Unmarried, Married, Other]
          type: DropDown
        - layout_properties: {grid_position: 'XQINBJ,VGIMCE WZGQTW,GFGHGY'}
          name: label_2_copy_4
          properties: {align: center, text: Employment}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_employment'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'XQINBJ,VGIMCE RINTHS,JGLHEV'}
          name: indiv_employment_dd
          properties:
            include_placeholder: true
            items: [Full Time, Part Time, Not Paid]
          type: DropDown
        - layout_properties: {grid_position: 'XQINBJ,VDIOQO ONMDAK,YLJHHY'}
          name: label_2_copy_5
          properties: {align: center, text: Education}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_education'']', property: selected_value, writeback: true}
          event_bindings: {change: indiv_education_dd_change}
          layout_properties: {grid_position: 'XQINBJ,VDIOQO FOQBCI,CNOAZN'}
          name: indiv_education_dd
          properties:
            include_placeholder: true
            items: [Tertiary, Secondary, Lower Than Secondary]
          type: DropDown
        - layout_properties: {grid_position: 'RZQKPU,KFBPNQ IWKKVN,FOOBYD'}
          name: label_2_copy_7
          properties: {align: center, text: Health Status Before Intervention}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_initial'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'RZQKPU,KFBPNQ YRYOYD,QSUAHI'}
          name: indiv_initial_dd
          properties:
            include_placeholder: true
            items: [Good, Fair, Poor]
          type: DropDown
        - layout_properties: {grid_position: 'RZQKPU,SXQLZW RZGVAA,EVWTPW'}
          name: label_2_copy_8
          properties: {align: center, text: Health Status After Intervention}
          type: Label
        - data_bindings:
          - {code: 'self.item[''indiv_adjusted'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'RZQKPU,SXQLZW UMETYW,MRRNKJ'}
          name: indiv_adjusted_dd
          properties:
            include_placeholder: true
            items: [Good, Fair, Poor]
          type: DropDown
        layout_properties: {grid_position: 'VFTBYK,BRENAJ'}
        name: individual_selection_homepage
        properties: {col_widths: '{"NBHUCU":10,"BDOEJW":45,"UZRGZS":10,"UHJNHL":25}', role: outlined-card, visible: true}
        type: ColumnPanel
      - event_bindings: {click: indiv_money_button_click}
        layout_properties: {grid_position: 'AASLXN,QVXLZK'}
        name: indiv_money_button
        properties: {align: center, role: filled-button, text: Edit Monetary Values}
        type: Button
      - event_bindings: {click: indiv_run_sim_button_click}
        layout_properties: {grid_position: 'AASLXN,AHTEGY'}
        name: indiv_run_sim_button
        properties: {align: center, role: filled-button, text: Run Simulator}
        type: Button
      - components:
        - layout_properties: {grid_position: 'SNEXFC,HVLPRG'}
          name: indiv_initial_time_plot
          properties: {visible: false}
          type: Plot
        - layout_properties: {grid_position: 'RVZSKL,ZPSFAH'}
          name: indiv_adjusted_time_plot
          properties: {visible: false}
          type: Plot
        - layout_properties: {grid_position: 'EMXJZD,PIWOWP'}
          name: indiv_combo_time_plot
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'YOHEZI,DBKDEP'}
          name: indiv_difference_time_plot
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'ARIYKQ,WTKTHD'}
          name: indiv_stacked_time_pie
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'WHQNDW,ZMMSCZ'}
          name: indiv_difference_time_pie
          properties: {visible: false}
          type: Plot
        - components:
          - components:
            - layout_properties: {slot: name_1}
              name: indiv_name_1
              properties: {}
              type: RichText
            - layout_properties: {slot: name_2}
              name: indiv_name_2
              properties: {}
              type: RichText
            - layout_properties: {slot: initial_rank_1}
              name: indiv_initial_rank1
              properties: {}
              type: RichText
            - layout_properties: {slot: initial_rank_2}
              name: indiv_initial_rank2
              properties: {}
              type: RichText
            - layout_properties: {slot: initial_value}
              name: indiv_initial_value1
              properties: {}
              type: RichText
            - layout_properties: {slot: adjusted_rank1}
              name: indiv_adjusted_rank1
              properties: {}
              type: RichText
            - layout_properties: {slot: adjusted_rank2}
              name: indiv_adjusted_rank2
              properties: {}
              type: RichText
            - layout_properties: {slot: name_3}
              name: indiv_name_3
              properties: {}
              type: RichText
            - layout_properties: {slot: adjusted_value}
              name: indiv_adjusted_value1
              properties: {}
              type: RichText
            - layout_properties: {slot: difference_value}
              name: indiv_difference_value1
              properties: {}
              type: RichText
            - layout_properties: {slot: name}
              name: indiv_name_4
              properties: {}
              type: RichText
            layout_properties: {grid_position: 'XKHVTQ,LHFYMF'}
            name: richtext_sentence_p1
            properties: {content: 'The annual value of activities when {name_1}''s health is {initial_rank_1} is €{initial_value} (in real 2023 Euros). The annual value of activities when {name_2}''s health is {adjusted_rank1} is €{adjusted_value} (in real 2023 Euros).  The value of health attributable to changes in time spent on activities for {name_3} when {name}''s health changes from {initial_rank_2} to {adjusted_rank2} is €{difference_value} (in real 2023 Euros).'}
            type: RichText
          layout_properties: {grid_position: 'NGMCSM,PUAGBA'}
          name: indiv_text_paragraph_card
          properties: {role: outlined-card, visible: true}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'OFTFXY,WJDDSM'}
            name: label_10
            properties: {align: center, role: input-prompt, text: Before Intervention}
            type: Label
          - layout_properties: {grid_position: 'OAPYQG,SJVFAI'}
            name: rich_text_2_copy_4_copy_2
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'OAPYQG,PUJAOY'}
            name: indiv_initial_value_box
            properties: {align: left, content: '', role: null}
            type: RichText
          - layout_properties: {grid_position: 'EJZYAN,UYSMIO'}
            name: rich_text_1_copy_5
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - components: []
            layout_properties: {grid_position: 'EJZYAN,RBDOCR'}
            name: indiv_initial_time_box
            properties: {align: left, content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'IAVSHM,UCZKKB'}
            name: rich_text_1_copy_5_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'IAVSHM,FUVCFE'}
            name: indiv_initial_moneytime_box
            properties: {align: left, content: ''}
            type: RichText
          layout_properties: {grid_position: 'MHUAIY,VKTIUE'}
          name: indiv_initialvalue_text_card
          properties: {role: outlined-card, visible: true}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'OFTFXY,WJDDSM'}
            name: label_10_copy
            properties: {align: center, role: input-prompt, text: After Intervention}
            type: Label
          - layout_properties: {grid_position: 'XPJQUQ,PROHUG'}
            name: rich_text_2_copy_4_copy_5
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'XPJQUQ,AMHBKT'}
            name: indiv_adjusted_value_box
            properties: {align: left, content: '', role: null}
            type: RichText
          - layout_properties: {grid_position: 'OEAWUC,JBBZYM'}
            name: rich_text_1_copy_4
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'OEAWUC,XXSKED'}
            name: indiv_adjusted_time_box
            properties: {align: left, content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'FJJAXN,FHEGED'}
            name: rich_text_1_copy_4_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'FJJAXN,JMHJSV'}
            name: indiv_adjusted_moneytime_box
            properties: {align: left, content: ''}
            type: RichText
          layout_properties: {grid_position: 'MHUAIY,AAAWLV'}
          name: indiv_adjustedvalue_text_card
          properties: {col_widths: '{}', role: outlined-card, visible: true}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'OFTFXY,WJDDSM'}
            name: label_10_copy_2
            properties: {align: center, role: input-prompt, text: Difference}
            type: Label
          - layout_properties: {grid_position: 'OAPYQG,SLUZMT'}
            name: rich_text_2_copy_4_copy_6
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'OAPYQG,QHMBNB'}
            name: indiv_difference_value_box
            properties: {align: left, content: '', role: null}
            type: RichText
          - layout_properties: {grid_position: 'KXCGHV,YIMDAB'}
            name: rich_text_1_copy_6
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'KXCGHV,WCCMFC'}
            name: indiv_difference_time_box
            properties: {align: left, content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'OWBEMU,HYRBKT'}
            name: rich_text_1_copy_6_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'OWBEMU,VQEHXQ'}
            name: indiv_difference_moneytime_box
            properties: {align: left, content: ''}
            type: RichText
          layout_properties: {grid_position: 'MHUAIY,XXRGSZ'}
          name: indiv_changevalue_text_card
          properties: {role: outlined-card, visible: true}
          type: ColumnPanel
        layout_properties: {grid_position: 'MVZFRM,WPEPRM'}
        name: individual_visual_homepage
        properties: {role: outlined-card, visible: false}
        type: ColumnPanel
      layout_properties: {grid_position: 'TTUOWI,CZPSNR'}
      name: individual_homepage
      properties: {background: 'theme:Primary Container', role: outlined-card, visible: false}
      type: ColumnPanel
    - components:
      - layout_properties: {grid_position: 'MXQOXD,JWBSYD'}
        name: label_3_copy_copy
        properties: {align: center, bold: true, font_size: 22, role: title, text: Population Level Tool}
        type: Label
      - components:
        - layout_properties: {grid_position: 'WMRLLG,AFCVRT'}
          name: label_1_copy
          properties: {align: center, bold: true, text: 'Intervention Name:'}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_name'']', property: text, writeback: true}
          layout_properties: {grid_position: 'WMRLLG,GUIMJU'}
          name: pop_intervention_name
          properties: {}
          type: TextBox
        - layout_properties: {grid_position: 'WMRLLG,PTRMZM'}
          name: label_1
          properties: {align: center, bold: true, text: 'Country:'}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_country'']', property: selected_value, writeback: true}
          event_bindings: {change: pop_country_dd_change}
          layout_properties: {grid_position: 'WMRLLG,IQJREN'}
          name: pop_country_dd
          properties:
            include_placeholder: true
            items: [Belgium, Estonia, Finland, France, Greece, Romania, Serbia, United Kingdom]
            visible: true
          type: DropDown
        - layout_properties: {grid_position: 'MYYIVO,SUQDZA UFFKMT,DMZPGZ'}
          name: label_1_copy_2
          properties: {align: center, bold: true, text: Age Range Of Group}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_age'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'MYYIVO,SUQDZA RJVZDL,ZSAGGV'}
          name: pop_age_dd
          properties:
            include_placeholder: true
            items: [55-64, 65-74, 75+]
          type: DropDown
        - layout_properties: {grid_position: 'MYYIVO,ZOBCMA NYSRIS,AQZTGG'}
          name: label_5
          properties: {align: center, bold: true, text: Population Number}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_number'']', property: text, writeback: true}
          event_bindings: {lost_focus: pop_number_box_lost_focus}
          layout_properties: {grid_position: 'MYYIVO,ZOBCMA SMZIGB,BLZPDP'}
          name: pop_number_box
          properties: {type: number}
          type: TextBox
        - layout_properties: {grid_position: 'RMVJDT,BVLZPB'}
          name: label_1_copy_4
          properties: {align: center, bold: true, text: Health Status Before Intervention (By Percent)}
          type: Label
        - layout_properties: {grid_position: 'RMVJDT,DELQGG'}
          name: label_1_copy_5
          properties: {align: center, bold: true, text: Health Status After Intervention (By Percent)}
          type: Label
        - layout_properties: {grid_position: 'HVSYNI,EAERVR FYSRZI,NASNNZ KQJYHH,QRJTGT'}
          name: label_6_copy_2
          properties: {align: right, text: Percent Poor}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_initialpoor'']', property: level, writeback: true}
          event_bindings: {change: initialpoor_slider_change}
          layout_properties: {grid_position: 'HVSYNI,EAERVR FYSRZI,NASNNZ XYZQKA,AYSGGK'}
          name: initialpoor_slider
          properties: {level: null, selected_value: '0', step: 1}
          type: form:Slider
        - event_bindings: {pressed_enter: initialpoor_number_pressed_enter}
          layout_properties: {grid_position: 'HVSYNI,EAERVR FYSRZI,BOOSXC'}
          name: initialpoor_number
          properties: {align: center, bold: true, enabled: false, placeholder: '', role: outlined, type: number}
          type: TextBox
        - layout_properties: {grid_position: 'HVSYNI,EAERVR ZAGSVL,XTWUKC EELIDV,MADEIC'}
          name: label_6_copy
          properties: {align: right, text: Percent Fair}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_initialfair'']', property: level, writeback: true}
          event_bindings: {change: initialfair_slider_change}
          layout_properties: {grid_position: 'HVSYNI,EAERVR ZAGSVL,XTWUKC XTMJHK,IBCKOC'}
          name: initialfair_slider
          properties: {level: null, selected_value: '0', step: 1}
          type: form:Slider
        - event_bindings: {pressed_enter: initialfair_number_pressed_enter}
          layout_properties: {grid_position: 'HVSYNI,EAERVR ZAGSVL,QLWYPU'}
          name: initialfair_number
          properties: {align: center, bold: true, enabled: false, placeholder: '', role: outlined, type: number}
          type: TextBox
        - data_bindings:
          - {code: 'self.item[''pop_initialgood'']', property: level, writeback: true}
          event_bindings: {change: initialgood_slider_change}
          layout_properties: {grid_position: 'HVSYNI,EAERVR WMFFPE,PTCKCI'}
          name: initialgood_slider
          properties: {level: null, selected_value: '0', step: 1}
          type: form:Slider
        - layout_properties: {grid_position: 'HVSYNI,EAERVR EWJKTS,WMDWIS'}
          name: label_6
          properties: {align: right, text: Percent Good (Auto-Calculated)}
          type: Label
        - data_bindings: []
          event_bindings: {pressed_enter: initialgood_number_pressed_enter}
          layout_properties: {grid_position: 'HVSYNI,EAERVR EWJKTS,JHJTMX'}
          name: initialgood_number
          properties: {align: center, bold: true, enabled: false, placeholder: '', role: outlined, type: number}
          type: TextBox
        - layout_properties: {grid_position: 'HVSYNI,EAERVR MPGEQR,AFXWIT'}
          name: label_1_copy_3
          properties: {align: center, text: Before Helath Status, visible: false}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_initial'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'HVSYNI,EAERVR TYEVZV,YBELEB'}
          name: pop_initial_dd
          properties:
            include_placeholder: true
            items: [Good, Fair, Poor]
            visible: false
          type: DropDown
        - layout_properties: {grid_position: 'HVSYNI,MFJBQB UULWNQ,FVSMTO EAFZSW,BHPIZX'}
          name: label_6_copy_5
          properties: {align: right, text: Percent Poor}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_adjustedpoor'']', property: level, writeback: true}
          event_bindings: {change: adjustedpoor_slider_change}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB UULWNQ,FVSMTO HHTRGU,FBRFCJ'}
          name: adjustedpoor_slider
          properties: {level: null, selected_value: '0', step: 1}
          type: form:Slider
        - event_bindings: {pressed_enter: adjustedpoor_number_pressed_enter}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB UULWNQ,ZGFFYR'}
          name: adjustedpoor_number
          properties: {align: center, bold: true, enabled: false, placeholder: '', role: outlined, type: number}
          type: TextBox
        - layout_properties: {grid_position: 'HVSYNI,MFJBQB XRLHYG,UOBRUP GHSIZC,SRIWCC'}
          name: label_6_copy_4
          properties: {align: right, text: Percent Fair}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_adjustedfair'']', property: level, writeback: true}
          event_bindings: {change: adjustedfair_slider_change}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB XRLHYG,UOBRUP QILDFZ,TJYJXD'}
          name: adjustedfair_slider
          properties: {level: null, selected_value: '0', step: 1}
          type: form:Slider
        - event_bindings: {pressed_enter: adjustedfair_number_pressed_enter}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB XRLHYG,LTWWRL'}
          name: adjustedfair_number
          properties: {align: center, bold: true, enabled: false, placeholder: '', role: outlined, type: number}
          type: TextBox
        - data_bindings:
          - {code: 'self.item[''pop_adjustedgood'']', property: level, writeback: true}
          event_bindings: {change: adjustedgood_slider_change}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB NWPAQF,GWUPMO'}
          name: adjustedgood_slider
          properties: {level: null, selected_value: '0', step: 1}
          type: form:Slider
        - layout_properties: {grid_position: 'HVSYNI,MFJBQB BUVWKS,LRZIHR'}
          name: label_6_copy_3
          properties: {align: right, text: Percent Good (Auto-Calculated)}
          type: Label
        - data_bindings: []
          event_bindings: {pressed_enter: adjustedgood_number_pressed_enter}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB BUVWKS,GEGROG'}
          name: adjustedgood_number
          properties: {align: center, bold: true, enabled: false, placeholder: '', role: outlined, text: '', type: number}
          type: TextBox
        - layout_properties: {grid_position: 'HVSYNI,MFJBQB KBANZX,JAIPZC'}
          name: label_1_copy_6
          properties: {align: center, text: After Health Status, visible: false}
          type: Label
        - data_bindings:
          - {code: 'self.item[''pop_adjusted'']', property: selected_value, writeback: true}
          layout_properties: {grid_position: 'HVSYNI,MFJBQB IYHFWI,JBRFTW'}
          name: pop_adjusted_dd
          properties:
            include_placeholder: true
            items: [Good, Fair, Poor]
            visible: false
          type: DropDown
        layout_properties: {grid_position: 'LCQJNC,KKYVTT'}
        name: pop_selection_homepage
        properties: {col_widths: '{"AFCVRT":10,"GUIMJU":25,"PTRMZM":10,"IQJREN":15,"XTWUKC":45,"QLWYPU":15,"WMDWIS":45,"JHJTMX":15,"LRZIHR":45,"GEGROG":15,"UOBRUP":45,"LTWWRL":15,"FVSMTO":45,"ZGFFYR":15,"NASNNZ":45,"BOOSXC":15}', role: outlined-card, visible: true}
        type: ColumnPanel
      - event_bindings: {click: pop_money_button_click}
        layout_properties: {grid_position: 'BTBNCQ,RXHTSY'}
        name: pop_money_button
        properties: {align: center, role: filled-button, text: Edit Monetary Values}
        type: Button
      - event_bindings: {click: pop_run_sim_button_click}
        layout_properties: {grid_position: 'BTBNCQ,LLBWLN'}
        name: pop_run_sim_button_copy
        properties: {align: center, role: filled-button, text: Run Simulator}
        type: Button
      - components:
        - components:
          - layout_properties: {slot: n}
            name: pop_visual_title_n
            properties: {}
            type: RichText
          layout_properties: {grid_position: 'MJDQHK,KERMJW'}
          name: pop_visual_title
          properties: {align: center, content: '**Population Scale (N = {n})**', font: '', font_size: 21}
          type: RichText
        - layout_properties: {grid_position: 'ZWNBBX,SMATXO'}
          name: pop_initial_time_plot
          properties: {visible: false}
          type: Plot
        - layout_properties: {grid_position: 'ZWNBBX,ESZRLU'}
          name: pop_adjusted_time_plot
          properties: {visible: false}
          type: Plot
        - layout_properties: {grid_position: 'XDRIFF,NVXMGN'}
          name: pop_combo_time_plot
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'OHPOVG,JGSDHA'}
          name: pop_difference_time_plot
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'OHAGEY,NSGLIL'}
          name: pop_stacked_time_pie
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'JRQFSL,NFQSUD'}
          name: pop_difference_time_pie
          properties: {visible: false}
          type: Plot
        - components:
          - layout_properties: {grid_position: 'FRWASB,ANENKQ'}
            name: label_4
            properties: {align: center, bold: true, role: input-prompt, text: Before Intervention}
            type: Label
          - layout_properties: {grid_position: 'WWXOVW,YNLKAM'}
            name: rich_text_2_copy_4
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'WWXOVW,BSDIGI'}
            name: pop_initial_value_box
            properties: {content: ''}
            type: RichText
          - layout_properties: {grid_position: 'EBONTJ,EHQKDB'}
            name: rich_text_1
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - components: []
            layout_properties: {grid_position: 'EBONTJ,IFBPYT'}
            name: pop_initial_time_box
            properties: {content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'TKLYKN,FMVQUA'}
            name: rich_text_1_copy_3
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'TKLYKN,VNFHBX'}
            name: pop_initial_moneytime_box
            properties: {content: ''}
            type: RichText
          layout_properties: {grid_position: 'XBRBMO,UVMGDX'}
          name: outlined_card_2
          properties: {col_widths: '{"EHQKDB":30,"IFBPYT":30}', role: outlined-card}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'ICJLDM,TYVWHV'}
            name: label_4_copy
            properties: {align: center, bold: true, role: input-prompt, text: After Intervention}
            type: Label
          - layout_properties: {grid_position: 'GOFJYG,LXVBMR'}
            name: rich_text_2_copy_4_copy_3
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - components: []
            layout_properties: {grid_position: 'GOFJYG,QHIFUS'}
            name: pop_adjusted_value_box
            properties: {content: ''}
            type: RichText
          - layout_properties: {grid_position: 'OFQIOO,FQHJTI'}
            name: rich_text_1_copy
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - components: []
            layout_properties: {grid_position: 'OFQIOO,ILUMQT'}
            name: pop_adjusted_time_box
            properties: {content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'AXRKCN,QWCETC'}
            name: rich_text_1_copy_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'AXRKCN,VDDEPV'}
            name: pop_adjusted_moneytime_box
            properties: {content: ''}
            type: RichText
          layout_properties: {grid_position: 'XBRBMO,RLLBEO'}
          name: outlined_card_2_copy
          properties: {role: outlined-card}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'JKQISF,DEBNLM'}
            name: label_4_copy_2
            properties: {align: center, bold: true, role: input-prompt, text: Difference}
            type: Label
          - layout_properties: {grid_position: 'JPLTZR,WHVOEG'}
            name: rich_text_2_copy_4_copy_4
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'JPLTZR,LACMXK'}
            name: pop_difference_value_box
            properties: {content: ''}
            type: RichText
          - layout_properties: {grid_position: 'HQRROZ,KUTXMX'}
            name: rich_text_1_copy_2
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'HQRROZ,LOLLSB'}
            name: pop_difference_time_box
            properties: {content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'CLYNKJ,FJDEGA'}
            name: rich_text_1_copy_2_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'CLYNKJ,WGKNZX'}
            name: pop_difference_moneytime_box
            properties: {content: ''}
            type: RichText
          layout_properties: {grid_position: 'XBRBMO,FNDOZA'}
          name: outlined_card_2_copy_2
          properties: {role: outlined-card}
          type: ColumnPanel
        layout_properties: {grid_position: 'WXQXMG,PNLMYX'}
        name: population_visual_homepage
        properties: {role: outlined-card, visible: false}
        type: ColumnPanel
      - components:
        - layout_properties: {grid_position: 'FMOFTU,TJPQJQ'}
          name: pop_visual_title_single
          properties: {align: center, bold: true, role: title, text: 'Individual Scale (Average Per Capita) '}
          type: Label
        - layout_properties: {grid_position: 'ZWNBBX,SMATXO'}
          name: pop_initial_time_plot_single
          properties: {visible: false}
          type: Plot
        - layout_properties: {grid_position: 'ZWNBBX,ESZRLU'}
          name: pop_adjusted_time_plot_single
          properties: {visible: false}
          type: Plot
        - layout_properties: {grid_position: 'HZOXLG,TPUHVW'}
          name: pop_combo_time_plot_single
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'OHPOVG,JGSDHA'}
          name: pop_difference_time_plot_single
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'OHAGEY,NSGLIL'}
          name: pop_stacked_time_pie_single
          properties: {}
          type: Plot
        - layout_properties: {grid_position: 'JRQFSL,NFQSUD'}
          name: pop_difference_time_pie_single
          properties: {visible: false}
          type: Plot
        - components:
          - layout_properties: {grid_position: 'FRWASB,ANENKQ'}
            name: label_4_copy_3
            properties: {align: center, bold: true, role: input-prompt, text: Before Intervention}
            type: Label
          - layout_properties: {grid_position: 'WWXOVW,YNLKAM'}
            name: rich_text_2_copy_4_copy
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'WWXOVW,BSDIGI'}
            name: pop_initial_value_box_single
            properties: {content: ''}
            type: RichText
          - layout_properties: {grid_position: 'EBONTJ,EHQKDB'}
            name: rich_text_1_copy_7
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'EBONTJ,IFBPYT'}
            name: pop_initial_time_box_single
            properties: {content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'TKLYKN,FMVQUA'}
            name: rich_text_1_copy_3_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'TKLYKN,VNFHBX'}
            name: pop_initial_moneytime_box_single
            properties: {content: ''}
            type: RichText
          layout_properties: {grid_position: 'XBRBMO,UVMGDX'}
          name: outlined_card_2_copy_3
          properties: {col_widths: '{"EHQKDB":30,"IFBPYT":30}', role: outlined-card}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'ICJLDM,TYVWHV'}
            name: label_4_copy_copy
            properties: {align: center, bold: true, role: input-prompt, text: After Intervention}
            type: Label
          - layout_properties: {grid_position: 'GOFJYG,LXVBMR'}
            name: rich_text_2_copy_4_copy_3_copy
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'GOFJYG,QHIFUS'}
            name: pop_adjusted_value_box_single
            properties: {content: ''}
            type: RichText
          - layout_properties: {grid_position: 'OFQIOO,FQHJTI'}
            name: rich_text_1_copy_copy_2
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'OFQIOO,ILUMQT'}
            name: pop_adjusted_time_box_single
            properties: {content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'AXRKCN,QWCETC'}
            name: rich_text_1_copy_copy_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'AXRKCN,VDDEPV'}
            name: pop_adjusted_moneytime_box_single
            properties: {content: ''}
            type: RichText
          layout_properties: {grid_position: 'XBRBMO,RLLBEO'}
          name: outlined_card_2_copy_copy
          properties: {role: outlined-card}
          type: ColumnPanel
        - components:
          - layout_properties: {grid_position: 'JKQISF,DEBNLM'}
            name: label_4_copy_2_copy
            properties: {align: center, bold: true, role: input-prompt, text: Difference}
            type: Label
          - layout_properties: {grid_position: 'JPLTZR,WHVOEG'}
            name: rich_text_2_copy_4_copy_4_copy
            properties: {align: right, content: 'Value (Euros/Annual):'}
            type: RichText
          - layout_properties: {grid_position: 'JPLTZR,LACMXK'}
            name: pop_difference_value_box_single
            properties: {content: ''}
            type: RichText
          - layout_properties: {grid_position: 'HQRROZ,KUTXMX'}
            name: rich_text_1_copy_2_copy_2
            properties: {align: right, content: 'Total Time (Min/Month):', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'HQRROZ,LOLLSB'}
            name: pop_difference_time_box_single
            properties: {content: '', visible: false}
            type: RichText
          - layout_properties: {grid_position: 'CLYNKJ,FJDEGA'}
            name: rich_text_1_copy_2_copy_copy
            properties: {align: right, content: 'Valued Time (Min/Month):'}
            type: RichText
          - layout_properties: {grid_position: 'CLYNKJ,WGKNZX'}
            name: pop_difference_moneytime_box_single
            properties: {content: ''}
            type: RichText
          layout_properties: {grid_position: 'XBRBMO,FNDOZA'}
          name: outlined_card_2_copy_2_copy
          properties: {role: outlined-card}
          type: ColumnPanel
        layout_properties: {grid_position: 'NBEBRY,RPNQET'}
        name: population_visual_homepage_single
        properties: {role: outlined-card, visible: false}
        type: ColumnPanel
      layout_properties: {grid_position: 'VPYWTG,LHXSDI'}
      name: population_homepage
      properties: {background: 'theme:Primary Container', role: outlined-card, visible: false}
      type: ColumnPanel
    - components:
      - event_bindings: {click: homepage_return_button_click}
        layout_properties: {grid_position: 'ILCPYT,UTPHRP'}
        name: homepage_return_button
        properties: {role: filled-button, text: Return to Homepage}
        type: Button
      layout_properties: {grid_position: 'KDJKIS,QPAULW'}
      name: return_homepage
      properties: {background: 'theme:Primary Container', role: outlined-card}
      type: ColumnPanel
    layout_properties: {slot: default}
    name: content_panel
    properties: {col_widths: '{}'}
    type: ColumnPanel
  container:
    properties: {html: '', visible: true}
    type: HtmlTemplate
  id: WLQ2VPJYYUTXT7DICI5PYRWPV5MBHDLZ
  is_package: true
- class_name: Indiv_Money_Value
  code: |+
    from ._anvil_designer import Indiv_Money_ValueTemplate
    from anvil import *
    import anvil.server
    import anvil.tables as tables
    import anvil.tables.query as q
    from anvil.tables import app_tables


    class Indiv_Money_Value(Indiv_Money_ValueTemplate):
        def get_updated_values(self):
            """Retrieve updated values from the form fields"""
            return {
                "housing": float(self.housing_box.text),
                "transport": float(self.transport_box.text),
                "nutrition": float(self.nutrition_box.text),
                "clothing": float(self.clothing_box.text),
                "laundry": float(self.laundry_box.text),
                "childcare": float(self.childcare_box.text),
                "adultcare": float(self.adultcare_box.text),
                "voluntary": float(self.voluntary_box.text),
            }

        def resetvalues_button_click(self, **event_args):
          """This method is called when the button is clicked"""
          default_values = {
                                    'housing': '22.77',
                                    'transport': '8.34',
                                    'nutrition': '5.26',
                                    'clothing': '1.35',
                                    'laundry': '18.17',
                                    'childcare': '7.25',
                                    'adultcare': '6.60',
                                    'voluntary': '17.20',
                                    }
          self.housing_box.text = default_values['housing']
          self.transport_box.text = default_values['transport']
          self.nutrition_box.text = default_values['nutrition']
          self.clothing_box.text = default_values['clothing']
          self.laundry_box.text = default_values['laundry']
          self.childcare_box.text = default_values['childcare']
          self.adultcare_box.text = default_values['adultcare']
          self.voluntary_box.text = default_values['voluntary']




  components:
  - layout_properties: {grid_position: 'WLCVQI,EUXLKU'}
    name: spacer_1
    properties: {height: 32}
    type: Spacer
  - layout_properties: {grid_position: 'WLCVQI,CGHUKF'}
    name: label_1
    properties: {align: center, bold: true, text: Hourly Value of Activities (In Euros)}
    type: Label
  - event_bindings: {click: resetvalues_button_click}
    layout_properties: {grid_position: 'WLCVQI,JRLYXU'}
    name: resetvalues_button
    properties: {role: filled-button, text: Reset Values}
    type: Button
  - layout_properties: {grid_position: 'ZSSERD,ZJPKOP'}
    name: label_1_copy_7
    properties: {text: 'Adult Care:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''adultcare'']', property: text, writeback: true}
    layout_properties: {grid_position: 'ZSSERD,GTXBKF'}
    name: adultcare_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'ZSSERD,RQCAMP'}
    name: label_1_copy_5
    properties: {text: 'Laundry:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''laundry'']', property: text, writeback: true}
    layout_properties: {grid_position: 'ZSSERD,CMTVJX'}
    name: laundry_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'LJMKOU,CCBWZN'}
    name: label_1_copy_6
    properties: {text: 'Childcare:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''childcare'']', property: text, writeback: true}
    layout_properties: {grid_position: 'LJMKOU,ELESUD'}
    name: childcare_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'LJMKOU,SFXQXV'}
    name: label_1_copy_3
    properties: {text: 'Nutrition:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''nutrition'']', property: text, writeback: true}
    layout_properties: {grid_position: 'LJMKOU,DZBRDJ'}
    name: nutrition_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'UFICXB,NINRBE'}
    name: label_1_copy_4
    properties: {text: 'Clothing:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''clothing'']', property: text, writeback: true}
    layout_properties: {grid_position: 'UFICXB,CASTNP'}
    name: clothing_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'UFICXB,SPOKAQ'}
    name: label_1_copy_2
    properties: {text: 'Transportation:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''transport'']', property: text, writeback: true}
    layout_properties: {grid_position: 'UFICXB,JMCPBU'}
    name: transport_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'EEFIFV,XVAOMJ'}
    name: label_1_copy
    properties: {text: 'Housing:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''housing'']', property: text, writeback: true}
    layout_properties: {grid_position: 'EEFIFV,XPWRGA'}
    name: housing_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'EEFIFV,IYPKFT'}
    name: label_1_copy_8
    properties: {text: 'Voluntary Activity:'}
    type: Label
  - data_bindings:
    - {code: 'self.item[''voluntary'']', property: text, writeback: true}
    layout_properties: {grid_position: 'EEFIFV,XYVAHN'}
    name: voluntary_box
    properties: {}
    type: TextBox
  container:
    properties: {col_widths: '{"CGHUKF":50,"EUXLKU":15}'}
    type: ColumnPanel
  id: '1728419722545562352275851.7174'
  is_package: true
- class_name: Pop_Money_Value
  code: |
    from ._anvil_designer import Pop_Money_ValueTemplate
    from anvil import *
    import anvil.server
    import anvil.tables as tables
    import anvil.tables.query as q
    from anvil.tables import app_tables


    class Pop_Money_Value(Pop_Money_ValueTemplate):
      def __init__(self, **properties):
        # Set Form properties and Data Bindings.
        self.init_components(**properties)

        # Any code you write here will run before the form opens.
  components:
  - layout_properties: {grid_position: 'RCNEAV,NCKHHM'}
    name: label_1
    properties: {align: center, bold: true, text: Hourly Value of Activities (In Euros)}
    type: Label
  - layout_properties: {grid_position: 'WGEBAD,QQVDYH'}
    name: label_2_copy_14
    properties: {text: Childcare}
    type: Label
  - data_bindings:
    - {code: 'self.item[''childcare'']', property: text, writeback: true}
    layout_properties: {grid_position: 'WGEBAD,ODEPDE'}
    name: childcare_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'WGEBAD,TDLPCD'}
    name: label_2_copy_13
    properties: {text: Nutrition}
    type: Label
  - data_bindings:
    - {code: 'self.item[''nutrition'']', property: text, writeback: true}
    layout_properties: {grid_position: 'WGEBAD,DPBEFG'}
    name: nutrition_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'ISRGUI,XAQEIX'}
    name: label_2
    properties: {text: Clothing}
    type: Label
  - data_bindings:
    - {code: 'self.item[''clothing'']', property: text, writeback: true}
    layout_properties: {grid_position: 'ISRGUI,SKXPMZ'}
    name: clothing_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'ISRGUI,AVNXOU'}
    name: label_2_copy_12
    properties: {text: Participatory Activities}
    type: Label
  - data_bindings:
    - {code: 'self.item[''paticipatoryactivities'']', property: text, writeback: true}
    layout_properties: {grid_position: 'ISRGUI,NFIJTI'}
    name: participatoryactivities_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'ARMVDX,UTRTHD'}
    name: label_2_copy_2
    properties: {text: Employment}
    type: Label
  - data_bindings:
    - {code: 'self.item[''employment'']', property: text, writeback: true}
    layout_properties: {grid_position: 'ARMVDX,PAWMPK'}
    name: employment_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'ARMVDX,IVXXMJ'}
    name: label_2_copy
    properties: {text: Personal Care}
    type: Label
  - data_bindings:
    - {code: 'self.item[''personalcare'']', property: text, writeback: true}
    layout_properties: {grid_position: 'ARMVDX,KAHIFD'}
    name: personalcare_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'PGEOKN,SUMVZN'}
    name: label_2_copy_3
    properties: {text: Hobbies/Computing}
    type: Label
  - data_bindings:
    - {code: 'self.item[''hobbiescomputing'']', property: text, writeback: true}
    layout_properties: {grid_position: 'PGEOKN,LKKIBG'}
    name: hobbiescomputing_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'PGEOKN,AOPTPL'}
    name: label_2_copy_4
    properties: {text: Social/Life/Entertainment}
    type: Label
  - data_bindings:
    - {code: 'self.item[''sociallifeentertainment'']', property: text, writeback: true}
    layout_properties: {grid_position: 'PGEOKN,CAGSOH'}
    name: sociallifeentertainment_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'FAXGGQ,GWLUEN'}
    name: label_2_copy_5
    properties: {text: Housing}
    type: Label
  - data_bindings:
    - {code: 'self.item[''housing'']', property: text, writeback: true}
    layout_properties: {grid_position: 'FAXGGQ,TSNODH'}
    name: housing_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'FAXGGQ,NQICFH'}
    name: label_2_copy_6
    properties: {text: Sports/Outdoors}
    type: Label
  - data_bindings:
    - {code: 'self.item[''sportsoutdoor'']', property: text, writeback: true}
    layout_properties: {grid_position: 'FAXGGQ,YIMPDR'}
    name: sportsoutdoor_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'PRFKZZ,JORESX'}
    name: label_2_copy_7
    properties: {text: Laundry}
    type: Label
  - data_bindings:
    - {code: 'self.item[''laundry'']', property: text, writeback: true}
    layout_properties: {grid_position: 'PRFKZZ,TWQYZL'}
    name: laundry_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'PRFKZZ,GQJZAH'}
    name: label_2_copy_8
    properties: {text: Study}
    type: Label
  - data_bindings:
    - {code: 'self.item[''study'']', property: text, writeback: true}
    layout_properties: {grid_position: 'PRFKZZ,ZKCQUV'}
    name: study_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'UVHCOI,EVIHLN'}
    name: label_2_copy_9
    properties: {text: Mass Media}
    type: Label
  - data_bindings:
    - {code: 'self.item[''massmedia'']', property: text, writeback: true}
    layout_properties: {grid_position: 'UVHCOI,TNINIJ'}
    name: massmedia_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'UVHCOI,LLQGYL'}
    name: label_2_copy_10
    properties: {text: Transport}
    type: Label
  - data_bindings:
    - {code: 'self.item[''transport'']', property: text, writeback: true}
    layout_properties: {grid_position: 'UVHCOI,RGUTKU'}
    name: transport_box
    properties: {}
    type: TextBox
  - layout_properties: {grid_position: 'OKWSIS,JTSLEQ'}
    name: label_2_copy_10_copy
    properties: {text: Voluntary}
    type: Label
  - data_bindings:
    - {code: 'self.item[''voluntary'']', property: text, writeback: true}
    layout_properties: {grid_position: 'OKWSIS,GLCDXO'}
    name: voluntary_box
    properties: {}
    type: TextBox
  container:
    properties: {col_widths: '{"JTSLEQ":15,"GLCDXO":45}'}
    type: ColumnPanel
  id: '1728420246584104324241292.76186'
  is_package: true
- class_name: Slider
  code: |
    from ._anvil_designer import SliderTemplate
    from anvil import *


    class Slider(SliderTemplate):
      def __init__(self, **properties):
        self._shown = False

        # You must call self.init_components() before doing anything else in this function
        self.init_components(**properties)

        # Any code you write here will run when the form opens.

      @property
      def level(self):
        return self._level

      @level.setter
      def level(self, value):
        self._level = value
        self.update()

      @property
      def slider_min(self):
        return self._slider_min

      @slider_min.setter
      def slider_min(self, value):
        self._slider_min = value
        self.update()

      @property
      def slider_max(self):
        return self._slider_max

      @slider_max.setter
      def slider_max(self, value):
        self._slider_max = value
        self.update()

      @property
      def step(self):
        return self._step

      @step.setter
      def step(self, value):
        self._step = value
        self.update()

      @property
      def level(self):
        return self._level

      @level.setter
      def level(self, value):
        self._level = value
        self.update()

      def slider_change(self, value, **event_args):
        self._level = int(value)
        self.raise_event("change", level=self.level)

      def update(self):
        if self._shown:
          self.call_js(
            "set_behavior", self.level, self.slider_min, self.slider_max, self.step
          )

      def form_show(self, **event_args):
        """This method is called when the HTML panel is shown on the screen"""
        self._shown = True
        self.update()
  components: []
  container:
    event_bindings: {show: form_show}
    properties:
      html: "<!-- CSS moved to theme.css under Assets -->\n<!-- You'll need to copy the Custom CSS portion to your own theme.css -->\n\n<div class=\"box\">\n  <input type=\"range\" min=\"0\" max=\"10\" step=\"1\" value=\"0\">\n</div>\n\n<script>\nfunction set_behavior(level, slider_min, slider_max, step) {\n  var slider = this.find(\"input\");\n\n  slider.on(\"input\", function() {\n    var newValue = slider.parent().find(\"input\").val();\n    anvil.call(slider, \"slider_change\", newValue);\n  })\n  \n  slider.prop({\n    \"value\": level,\n    \"min\": slider_min,\n    \"max\": slider_max,\n    \"step\": step\n  });\n}\n</script>"
    type: HtmlTemplate
  custom_component: true
  events:
  - default_event: true
    description: When the slider is moved
    name: change
    parameters:
    - {description: Slider's new value, name: level}
  id: '1715524137199606193139203.8779'
  is_package: true
  properties:
  - allow_binding_writeback: true
    binding_writeback_events: [change]
    default_binding_prop: true
    default_value: 1
    important: true
    name: level
    type: number
  - {important: true, name: slider_min, type: number}
  - {important: true, name: slider_max, type: number}
  - {default_value: 1, important: true, name: step, type: number}
  - {allow_binding_writeback: true, default_value: '', important: true, name: selected_value, type: string}
modules: []
name: Ageing Values Tool (DEV)
package_name: Ageing_Values_Tool__DEV_
renamed: true
runtime_options: {client_version: '3', server_spec: null, server_version: python3-full, version: 2}
scripts: []
server_modules:
- code: "import anvil.files\nfrom anvil.files import data_files\nimport anvil.tables as tables\nimport anvil.tables.query as q\nfrom anvil.tables import app_tables\nimport anvil.server\nfrom datetime import datetime\nimport pandas as pd\nfrom pandas import DataFrame\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\n\n# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Individual Codeset\n# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nreference_order = [\n  \"AdultCare\",\n  \"ChildCare\",\n  \"Clothing\",\n  \"Housing\",\n  \"Laundry\",\n  \"Nutrition\",\n  \"Transport\",\n  \"Voluntary\",\n  \"Employment\",\n  \"MassMedia\",\n  \"HobbiesComputing\",\n  \"ParticipatoryActivities\",\n  \"PersonalCare\",\n  \"SocialLifeEntertainment\",\n  \"SportsOutdoor\",\n  \"Study\",\n]\n\n# Default money values\nDEFAULT_INDIV_MONEY_VALUES = {\n    \"housing\": \"22.77\",\n    \"transport\": \"8.34\",\n    \"nutrition\": \"5.26\",\n    \"clothing\": \"1.35\",\n    \"laundry\": \"18.17\",\n    \"childcare\": \"7.25\",\n    \"adultcare\": \"6.60\",\n    \"voluntary\": \"17.20\",\n}\n\nDEFAULT_POP_MONEY_VALUES = {\n    \"housing\": \"22.77\",\n    \"transport\": \"8.34\",\n    \"nutrition\": \"5.26\",\n    \"clothing\": \"1.35\",\n    \"laundry\": \"18.17\",\n    \"childcare\": \"7.25\",\n    \"adultcare\": \"6.60\",\n    \"voluntary\": \"17.20\",\n}\n@anvil.server.callable\ndef store_user_selection(indiv_user_selections):\n  # Store data in server session (e.g., linked to the user by unique ID)\n  anvil.server.session[\"indiv_user_selections\"] = indiv_user_selections\n\n@anvil.server.callable\ndef store_indiv_money_selection(indiv_money_selections):\n  # Store data in server session (e.g., linked to the user by unique ID)\n  anvil.server.session[\"indiv_money_selections\"] = indiv_money_selections\n\n@anvil.server.callable\ndef store_pop_money_selection(pop_money_selections):\n  # Store data in server session (e.g., linked to the user by unique ID)\n  anvil.server.session[\"pop_money_selections\"] = pop_money_selections\n\n@anvil.server.callable\ndef initialize_indiv_money_values():\n    \"\"\"Reset individual money values to default in the session.\"\"\"\n    anvil.server.session[\"indiv_money_values\"] = DEFAULT_INDIV_MONEY_VALUES.copy()\n\n@anvil.server.callable\ndef update_indiv_money_values(updated_values):\n    \"\"\"Update the session with new individual money values.\"\"\"\n    anvil.server.session[\"indiv_money_values\"] = updated_values\n\n@anvil.server.callable\ndef get_indiv_money_values():\n    \"\"\"Get the current individual money values from the session.\"\"\"\n    return anvil.server.session.get(\"indiv_money_values\", DEFAULT_INDIV_MONEY_VALUES)\n\n@anvil.server.callable\ndef initialize_money_values():\n    if \"money_values\" not in anvil.server.session:\n        default_money_values = {\n            \"housing\": 22.77,\n            \"transport\": 8.34,\n            \"nutrition\": 5.26,\n            \"clothing\": 1.35,\n            \"laundry\": 18.17,\n            \"childcare\": 7.25,\n            \"adultcare\": 6.60,\n            \"voluntary\": 17.20,\n        }\n        anvil.server.session[\"money_values\"] = default_money_values\n    return anvil.server.session[\"money_values\"]\n\n@anvil.server.callable\ndef update_money_values(updated_values):\n    anvil.server.session[\"money_values\"] = updated_values\n  \n@anvil.server.callable\ndef process_user_selection_data():\n  # This function needs to be called directly by a client to have an active session\n  indiv_selected_dict = anvil.server.session.get(\"indiv_user_selections\")\n  if indiv_selected_dict:\n    # Proceed with processing\n    print(\"User selections:\", indiv_selected_dict)\n    return indiv_selected_dict\n  else:\n    raise Exception(\"No user selections found in the session.\")\n\n@anvil.server.callable\ndef initialize_defaults():\n    return {\n        \"indiv_money_values\": DEFAULT_INDIV_MONEY_VALUES.copy(),\n        \"pop_money_values\": DEFAULT_POP_MONEY_VALUES.copy(),\n    }\n\n@anvil.server.callable\ndef run_indiv_code():\n  print(\"START OF RUN INDIV CODE\")\n  # Retrieve updated money values from session\n  indiv_money_values = anvil.server.session.get(\"indiv_money_values\")\n  if not indiv_money_values:\n      raise ValueError(\"No money values found in the session.\")\n\n  # Create DataFrame of money values for calculations\n  df_indiv_money = pd.DataFrame([indiv_money_values]).astype(float)\n\n  # Use df_indiv_money in your calculations (e.g., multipliers)\n  print(\"Updated Individual Money Values:\", df_indiv_money)\n  df_indiv_raw = pd.read_csv(data_files[\"indiv_raw_values_all.csv\"])\n  print(\"INDIV RAW DF\")\n  print(df_indiv_raw)\n\n  df_indiv_raw[\"age\"] = (\n    df_indiv_raw[\"age\"]\n    .astype(str)\n    .replace({\"55_64\": \"55-64\", \"65_74\": \"65-74\", \"75_more\": \"75+\"})\n  )\n  df_indiv_raw[\"group\"] = (\n    df_indiv_raw[\"group\"]\n    .astype(str)\n    .replace({\"good\": \"Good\", \"fair\": \"Fair\", \"bad\": \"Poor\"})\n  )\n  df_indiv_raw[\"sex\"] = (\n    df_indiv_raw[\"sex\"].astype(str).replace({\"male\": \"Male\", \"female\": \"Female\"})\n  )\n  df_indiv_raw[\"marital\"] = (\n    df_indiv_raw[\"marital\"]\n    .astype(str)\n    .replace({\"married\": \"Married\", \"unmarried\": \"Unmarried\", \"other\": \"Other\"})\n  )\n  df_indiv_raw[\"employment\"] = (\n    df_indiv_raw[\"employment\"]\n    .astype(str)\n    .replace(\n      {\"full_time\": \"Full Time\", \"part_time\": \"Part Time\", \"not_paid\": \"Not Paid\"}\n    )\n  )\n  df_indiv_raw[\"education\"] = (\n    df_indiv_raw[\"education\"]\n    .astype(str)\n    .replace(\n      {\n        \"lower_than_secondary\": \"Lower Than Secondary\",\n        \"secondary_non_tertiary\": \"Secondary\",\n        \"tertiary\": \"Tertiary\",\n      }\n    )\n  )\n  df_indiv_raw[\"country\"] = (\n    df_indiv_raw[\"country\"]\n    .astype(str)\n    .replace(\n      {\n        \"BE\": \"Belgium\",\n        \"EE\": \"Estonia\",\n        \"FI\": \"Finland\",\n        \"FR\": \"France\",\n        \"EL\": \"Greece\",\n        \"RO\": \"Romania\",\n        \"RS\": \"Serbia\",\n        \"UK\": \"United Kingdom\",\n      }\n    )\n  )\n  print(\"INDIV RAW DF (CORRECT TEXT)\")\n  print(df_indiv_raw)\n\n  indiv_selected_dict = anvil.server.session.get(\"indiv_user_selections\")\n  if indiv_selected_dict:\n    print(\"INDIV USER SELECTED DICTIONARY\")\n    print(indiv_selected_dict)\n\n    # Ensure the dictionary is in the correct format for DataFrame creation\n    if isinstance(indiv_selected_dict, dict) and all(\n      isinstance(v, (int, float, str)) for v in indiv_selected_dict.values()\n    ):\n      indiv_selected_dict = [indiv_selected_dict]\n\n    df_indiv_selectedvar = pd.DataFrame.from_dict(indiv_selected_dict)\n    print(\"INDIV SELECTED VARIABLES DF\")\n    print(df_indiv_selectedvar)\n\n    # Proceed with the rest of your logic...\n  else:\n    raise ValueError(\"No user selections found in the session.\")\n\n  print(\"INDIV USER SELECTED DICTIONARY\")\n  print(indiv_selected_dict)\n  df_indiv_selectedvar = pd.DataFrame.from_dict(indiv_selected_dict)\n  print(\"INDIV SELECTED VARIABLES DF\")\n  print(df_indiv_selectedvar)\n\n  indiv_name = df_indiv_selectedvar.at[0, \"indiv_name\"]\n  indiv_country = df_indiv_selectedvar.at[0, \"indiv_country\"]\n  indiv_age = df_indiv_selectedvar.at[0, \"indiv_age\"]\n  indiv_sex = df_indiv_selectedvar.at[0, \"indiv_sex\"]\n  indiv_marital = df_indiv_selectedvar.at[0, \"indiv_marital\"]\n  indiv_education = df_indiv_selectedvar.at[0, \"indiv_education\"]\n  indiv_employment = df_indiv_selectedvar.at[0, \"indiv_employment\"]\n  indiv_initial = df_indiv_selectedvar.at[0, \"indiv_initial\"]\n  indiv_adjusted = df_indiv_selectedvar.at[0, \"indiv_adjusted\"]\n\n  # Filter raw data with selection criteria\n  indiv_selection_set = (\n    indiv_name,\n    indiv_country,\n    indiv_age,\n    indiv_sex,\n    indiv_marital,\n    indiv_education,\n    indiv_employment,\n    indiv_initial,\n    indiv_adjusted,\n  )\n  print(\"INDIV SELECTION SET\")\n  print(indiv_selection_set)\n\n  # create \"initial\" numbers DF\n\n  df_indiv_filtered_initial = df_indiv_raw[\n    (df_indiv_raw[\"country\"] == indiv_country)\n    & (df_indiv_raw[\"age\"] == indiv_age)\n    & (df_indiv_raw[\"sex\"] == indiv_sex)\n    & (df_indiv_raw[\"marital\"] == indiv_marital)\n    & (df_indiv_raw[\"education\"] == indiv_education)\n    & (df_indiv_raw[\"employment\"] == indiv_employment)\n    & (df_indiv_raw[\"group\"] == indiv_initial)\n  ]\n  df_indiv_filtered_initial.set_index(\"activity\", inplace=True)\n  df_indiv_filtered_initial = df_indiv_filtered_initial.drop(\n    [\"age\", \"sex\", \"marital\", \"education\", \"employment\"], axis=1\n  )\n  df_indiv_filtered_initial.rename(\n    columns={\"predicted\": \"initial_health\"}, inplace=True\n  )\n  print(\"INDIV INITIAL DF FILTERED\")\n  print(df_indiv_filtered_initial)\n  # create 'adjusted' numbers DF\n  df_indiv_filtered_adjusted = df_indiv_raw[\n    (df_indiv_raw[\"country\"] == indiv_country)\n    & (df_indiv_raw[\"age\"] == indiv_age)\n    & (df_indiv_raw[\"sex\"] == indiv_sex)\n    & (df_indiv_raw[\"marital\"] == indiv_marital)\n    & (df_indiv_raw[\"education\"] == indiv_education)\n    & (df_indiv_raw[\"employment\"] == indiv_employment)\n    & (df_indiv_raw[\"group\"] == indiv_adjusted)\n  ]\n  df_indiv_filtered_adjusted.set_index(\"activity\", inplace=True)\n  df_indiv_filtered_adjusted = df_indiv_filtered_adjusted.drop(\n    [\"age\", \"sex\", \"marital\", \"education\", \"employment\"], axis=1\n  )\n  df_indiv_filtered_adjusted.rename(\n    columns={\"predicted\": \"adjusted_health\"}, inplace=True\n  )\n  print(\"INDIV ADJUSTEDL DF FILTERED\")\n  print(df_indiv_filtered_adjusted)\n  # combine initial and adjusted values to one DF\n\n  extracted_adjusted_col = df_indiv_filtered_adjusted[\"adjusted_health\"]\n  print('INDIV ADJUSTED \"ADJ HEALT COLOUMN\"')\n  print(extracted_adjusted_col)\n  df_indiv_filtered_total = pd.concat(\n    [df_indiv_filtered_initial, extracted_adjusted_col], axis=1\n  )\n  df_indiv_filtered_total = df_indiv_filtered_total.drop(\n    [\"group\", \"SE\", \"country\"], axis=1\n  )\n  print(\"INDIV HEALTH TOTAL DF\")\n  print(df_indiv_filtered_total)\n  if df_indiv_filtered_total.empty:\n    raise ValueError(\"The DataFrame is empty and cannot be stored\")\n  # df_indiv_filtered_total = df_indiv_filtered_total.drop(['sex','marital','employment','education'],axis=1)\n\n  df_indiv_filtered_total[\"difference\"] = (\n    df_indiv_filtered_total[\"adjusted_health\"].values\n    - df_indiv_filtered_total[\"initial_health\"].values\n  )\n  print(\"INDIV FILTERED TOTAL DF\")\n\n  index_order = [\n    \"AdultCare\",\n    \"ChildCare\",\n    \"Clothing\",\n    \"Housing\",\n    \"Laundry\",\n    \"Nutrition\",\n    \"Transport\",\n    \"Voluntary\",\n    \"Employment\",\n    \"HobbiesComputing\",\n    \"MassMedia\",\n    \"ParticipatoryActivities\",\n    \"PersonalCare\",\n    \"SocialLifeEntertainment\",\n    \"SportsOutdoor\",\n    \"Study\",\n  ]\n  df_indiv_filtered_total = df_indiv_filtered_total.reindex(index_order)\n  df_indiv_filtered_total[\"Group\"] = [\n    \"Valued Activities\"\n    if i < len(df_indiv_filtered_total) / 2\n    else \"Non-Valued Activities\"\n    for i in range(len(df_indiv_filtered_total))\n  ]\n  print(df_indiv_filtered_total)\n  # dictionary of total values to pop filtered DF\n  df_indiv_filtered_total_money = df_indiv_filtered_total.drop(\n    [\n      \"Employment\",\n      \"HobbiesComputing\",\n      \"MassMedia\",\n      \"ParticipatoryActivities\",\n      \"PersonalCare\",\n      \"SocialLifeEntertainment\",\n      \"SportsOutdoor\",\n      \"Study\",\n    ]\n  )\n  print(\"INDIV FILTERED TOTAL MONEY DF\")\n  print(df_indiv_filtered_total_money)\n # Retrieve updated money values from session\n  indiv_money_values = anvil.server.session.get(\"indiv_money_values\")\n  if not indiv_money_values:\n      raise ValueError(\"No money values found in the session.\")\n\n  # Create DataFrame of money values for calculations\n  df_indiv_money = pd.DataFrame([indiv_money_values]).astype(float)\n\n  # Use df_indiv_money in your calculations (e.g., multipliers)\n  print(\"Updated Individual Money Values:\", df_indiv_money)\n\n  df_indiv_money_multiplied = df_indiv_filtered_total.copy()\n  columns_to_convert = df_indiv_money_multiplied.columns.difference([\"Group\"])\n  df_indiv_money_multiplied[columns_to_convert] = df_indiv_money_multiplied[\n    columns_to_convert\n  ].astype(float)\n  df_indiv_money_multiplied = df_indiv_money_multiplied.drop(\n    [\n      \"Employment\",\n      \"HobbiesComputing\",\n      \"MassMedia\",\n      \"ParticipatoryActivities\",\n      \"PersonalCare\",\n      \"SocialLifeEntertainment\",\n      \"SportsOutdoor\",\n      \"Study\",\n    ]\n  )\n  print(\"INDIV MONEY MULTIPLIED DF\")\n  print(df_indiv_money_multiplied)\n\n  adultcare_value = df_indiv_money.loc[0][\"adultcare\"]\n  childcare_value = df_indiv_money.loc[0][\"childcare\"]\n  clothing_value = df_indiv_money.loc[0][\"clothing\"]\n  housing_value = df_indiv_money.loc[0][\"housing\"]\n  laundry_value = df_indiv_money.loc[0][\"laundry\"]\n  nutrition_value = df_indiv_money.loc[0][\"nutrition\"]\n  transport_value = df_indiv_money.loc[0][\"transport\"]\n  voluntary_value = df_indiv_money.loc[0][\"voluntary\"]\n  # dictionary of total values to pop filtered DF\n  value_map = {\n    \"AdultCare\": adultcare_value,\n    \"ChildCare\": childcare_value,\n    \"Clothing\": clothing_value,\n    \"Housing\": housing_value,\n    \"Laundry\": laundry_value,\n    \"Nutrition\": nutrition_value,\n    \"Transport\": transport_value,\n    \"Voluntary\": voluntary_value,\n  }\n\n  # Ensure all rows exist in the DataFrame and perform calculations\n  for row_name, value in value_map.items():\n    # Ensure the row exists; initialize with zeros if not present\n    if row_name not in df_indiv_money_multiplied.index:\n      df_indiv_money_multiplied.loc[row_name] = 0\n\n    # Safely convert row to numeric and perform the calculation\n    df_indiv_money_multiplied.loc[row_name] = (\n      (pd.to_numeric(df_indiv_money_multiplied.loc[row_name], errors=\"coerce\") / 60)\n      * value\n    ) * 12\n  # df_indiv_money_multiplied.loc[\"AdultCare\"] = (\n  #   (df_indiv_money_multiplied.loc[\"AdultCare\"] / 60) * adultcare_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"ChildCare\"] = (\n  #   (df_indiv_money_multiplied.loc[\"ChildCare\"] / 60) * childcare_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"Clothing\"] = (\n  #   (df_indiv_money_multiplied.loc[\"Clothing\"] / 60) * clothing_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"Housing\"] = (\n  #   (df_indiv_money_multiplied.loc[\"Housing\"] / 60) * housing_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"Laundry\"] = (\n  #   (df_indiv_money_multiplied.loc[\"Laundry\"] / 60) * laundry_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"Nutrition\"] = (\n  #   (df_indiv_money_multiplied.loc[\"Nutrition\"] / 60) * nutrition_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"Transport\"] = (\n  #   (df_indiv_money_multiplied.loc[\"Transport\"] / 60) * transport_value\n  # ) * 12\n  # df_indiv_money_multiplied.loc[\"Voluntary\"] = (\n  #   (df_indiv_money_multiplied.loc[\"Voluntary\"] / 60) * voluntary_value\n  # ) * 12\n  print(\"INDIV MONEY MULTIPLIED DF\")\n  print(df_indiv_money_multiplied)\n\n  indiv_total_initial_time = df_indiv_filtered_total[\"initial_health\"].sum()\n  indiv_total_adjusted_time = df_indiv_filtered_total[\"adjusted_health\"].sum()\n  indiv_total_difference_time = df_indiv_filtered_total[\"difference\"].sum()\n  anvil.server.session[\"indiv_total_initial_time\"] = indiv_total_initial_time\n  anvil.server.session[\"indiv_total_adjusted_time\"] = indiv_total_adjusted_time\n  anvil.server.session[\"indiv_total_difference_time\"] = indiv_total_difference_time\n  indiv_filtered_time_totals = {\n    \"initial_health\": indiv_total_initial_time,\n    \"adjusted_health\": indiv_total_adjusted_time,\n    \"difference\": indiv_total_difference_time,\n  }\n  print(\"INDIV FILTERED TIME TOTALS\")\n  print(indiv_filtered_time_totals)\n\n  indiv_total_initial_time_money = df_indiv_filtered_total_money[\"initial_health\"].sum()\n  indiv_total_adjusted_time_money = df_indiv_filtered_total_money[\n    \"adjusted_health\"\n  ].sum()\n  indiv_total_difference_time_money = df_indiv_filtered_total_money[\"difference\"].sum()\n  anvil.server.session[\"indiv_total_initial_time_money\"] = (\n    indiv_total_initial_time_money\n  )\n  anvil.server.session[\"indiv_total_adjusted_time_money\"] = (\n    indiv_total_adjusted_time_money\n  )\n  anvil.server.session[\"indiv_total_difference_time_money\"] = (\n    indiv_total_difference_time_money\n  )\n  indiv_filtered_time_money_totals = {\n    \"initial_health\": indiv_total_initial_time_money,\n    \"adjusted_health\": indiv_total_adjusted_time_money,\n    \"difference\": indiv_total_difference_time_money,\n  }\n  print(\"INDIV FILTERED TIME MONEY TOTALS\")\n  print(indiv_filtered_time_money_totals)\n\n  indiv_total_initial_value = df_indiv_money_multiplied[\"initial_health\"].sum()\n  indiv_total_adjusted_value = df_indiv_money_multiplied[\"adjusted_health\"].sum()\n  indiv_total_difference_value = df_indiv_money_multiplied[\"difference\"].sum()\n  anvil.server.session[\"indiv_total_initial_value\"] = indiv_total_initial_value\n  anvil.server.session[\"indiv_total_adjusted_value\"] = indiv_total_adjusted_value\n  anvil.server.session[\"indiv_total_difference_value\"] = indiv_total_difference_value\n  indiv_filtered_value_totals = {\n    \"initial_health\": indiv_total_initial_value,\n    \"adjusted_health\": indiv_total_adjusted_value,\n    \"difference\": indiv_total_difference_value,\n  }\n  print(\"INDIV FILTERED VALUE TOTALS\")\n  print(indiv_filtered_value_totals)\n  anvil.server.session[\"indiv_total_plot_df\"] = df_indiv_filtered_total.to_dict(\n    \"records\"\n  )\n  anvil.server.session[\"indiv_total_plot_df_columns\"] = list(\n    df_indiv_filtered_total.columns\n  )\n  anvil.server.session[\"indiv_total_plot_df_index\"] = list(\n    df_indiv_filtered_total.index\n  )\n\n  print(\"DataFrame stored in session as a dictionary\")\n  return \"DataFrame stored successfully.\"\n  print(\"Is 'plot_df' in session:\", \"plot_df\" in anvil.server.session)\n  if \"plot_df\" in anvil.server.session:\n    print(\"Contents of 'plot_df':\", anvil.server.session[\"plot_df\"])\n  else:\n    print(\"No 'plot_df' found in session\")\n\n\n# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Individual Plots Codeset\n# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@anvil.server.callable\ndef create_barfig_indiv_adjusted_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"indiv_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"indiv_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"indiv_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_indiv_filtered_total.index = plot_df_index\n  y_max = df_indiv_filtered_total[[\"adjusted_health\"]].max().max()\n  # Create the bar plot for adjusted health\n  custom_colors = {\n    \"Valued Activities\": \"darkblue\",\n    \"Non-Valued Activities\": \"lightblue\",\n  }\n\n  indiv_fig_adjusted_time = px.bar(\n    df_indiv_filtered_total,\n    x=df_indiv_filtered_total.index,\n    y=\"adjusted_health\",\n    title=\"After Intervention Time Spent<br>On Selected Activities\",\n    color=\"Group\",\n    labels={\"x\": \"Activities\", \"adjusted_health\": \"Minutes Per Month\"},\n    barmode=\"group\",\n    color_discrete_map=custom_colors,  # Apply custom colors\n  )\n  # Adjust x0 and x1 to the midpoint of the chart\n  num_activities = len(df_indiv_filtered_total.index)  # Total number of activities\n  middle_index = num_activities / 2 - 0.5  # Middle index for the line\n\n  # Add the vertical line to divide the chart\n  indiv_fig_adjusted_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,  # Centered position for the line\n    y0=0,\n    y1=max(df_indiv_filtered_total[\"adjusted_health\"]) + 10,\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Add annotations for each group\n  indiv_fig_adjusted_time.add_annotation(\n    x=middle_index / 2,\n    y=max(df_indiv_filtered_total[\"adjusted_health\"]) + 5,  # Group 1 annotation\n    text=\"Valued Activities\",\n    showarrow=False,\n    font=dict(size=14),\n  )\n\n  indiv_fig_adjusted_time.add_annotation(\n    x=(middle_index + num_activities) / 2,\n    y=max(df_indiv_filtered_total[\"adjusted_health\"]) + 5,  # Group 2 annotation\n    text=\"Non-Valued Activities\",\n    showarrow=False,\n    font=dict(size=14),\n  )\n  indiv_fig_adjusted_time.update_layout(\n    showlegend=False,  # Drop the key\n    yaxis=dict(tickformat=\",.0f\"),\n  )\n  return indiv_fig_adjusted_time\n\n\n@anvil.server.callable\ndef create_barfig_indiv_initial_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"indiv_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"indiv_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"indiv_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_indiv_filtered_total.index = plot_df_index\n\n  # Create the bar plot for initial health\n  indiv_fig_initial_time = px.bar(\n    df_indiv_filtered_total,\n    x=df_indiv_filtered_total.index,\n    y=\"initial_health\",\n    title=\"Before Intervention Time Spent<br>On Selected Activities\",\n    color_discrete_sequence=[\"red\"],\n    labels={\"activity\": \"Activity\", \"initial_health\": \"Minutes Per Month\"},\n  )\n  indiv_fig_initial_time.update_yaxes(tickformat=\",.0f\")\n  return indiv_fig_initial_time\n\n\n# @anvil.server.callable\n# def create_barfig_indiv_difference_time():\n#     # Retrieve the DataFrame from session and reconstruct it\n#     plot_df_data = anvil.server.session.get('indiv_total_plot_df')\n#     plot_df_columns = anvil.server.session.get('indiv_total_plot_df_columns')\n#     plot_df_index = anvil.server.session.get('indiv_total_plot_df_index')\n\n#     if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n#         raise ValueError(\"No DataFrame found in session for plotting\")\n\n#     # Recreate the DataFrame\n#     df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n#     df_indiv_filtered_total.index = plot_df_index\n\n#     # Define custom colors\n#     custom_colors = {\n#         \"Valued Activities\": \"indigo\",\n#         \"Non-Valued Activities\": \"blueviolet\"\n#     }\n\n#     # Create the bar plot for the difference column\n#     indiv_fig_difference_time = px.bar(\n#         df_indiv_filtered_total,\n#         x=df_indiv_filtered_total.index,\n#         y=\"difference\",\n#         title=\"Difference In Time Spent<br>On Selected Activities\",\n#         color='Group',\n#         labels={'x': 'Activities', \"difference\": \"Minutes Per Month\"},\n#         barmode='group',\n#         color_discrete_map=custom_colors  # Apply custom colors\n#     )\n\n#     # Calculate the midpoint for the vertical dividing line\n#     num_activities = len(df_indiv_filtered_total.index)  # Total number of activities\n#     middle_index = num_activities / 2 - 0.5  # Middle index for the line\n\n#     # Dynamically calculate the y-axis range\n#     y_min = df_indiv_filtered_total['difference'].min() - 10  # Extend slightly below the lowest value\n#     y_max = df_indiv_filtered_total['difference'].max() + 10  # Extend slightly above the highest value\n\n#     # Add the vertical line to divide the chart\n#     indiv_fig_difference_time.add_shape(\n#         type=\"line\",\n#         x0=middle_index, x1=middle_index,  # Centered position for the line\n#         y0=y_min, y1=y_max,  # Extend the line to cover the entire y-axis range\n#         line=dict(color=\"black\", width=2, dash=\"dash\")\n#     )\n\n#     indiv_fig_difference_time.add_annotation(\n#         x=(middle_index / 2) - 0.2,  # Adjust position to center better\n#         y=y_max - 2000,  # Bring closer to the bars\n#         text=\"Valued Activities\",\n#         showarrow=False,\n#         font=dict(size=14),\n#         align=\"center\"\n#     )\n\n#     indiv_fig_difference_time.add_annotation(\n#         x=((middle_index + num_activities) / 2) + 0.2,  # Adjust position to center better\n#         y=y_max - 2000,  # Bring closer to the bars\n#         text=\"Non-Valued Activities\",\n#         showarrow=False,\n#         font=dict(size=14),\n#         align=\"center\"\n#     )\n\n#     # Remove the legend and format the y-axis\n#     indiv_fig_difference_time.update_layout(\n#         showlegend=False,  # Drop the key\n#         yaxis=dict(tickformat=\",.0f\")\n#     )\n\n\n#     return indiv_fig_difference_time\n@anvil.server.callable\ndef create_barfig_indiv_difference_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"indiv_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"indiv_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"indiv_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_indiv_filtered_total.index = plot_df_index\n\n  # Create the bar plot for the \"difference\" column\n  indiv_fig_difference_time = go.Figure(\n    data=[\n      go.Bar(\n        name=\"Difference\",\n        x=df_indiv_filtered_total.index,\n        y=df_indiv_filtered_total[\"difference\"],\n        marker=dict(color=\"purple\"),\n      ),\n    ],\n    layout=go.Layout(\n      title=\"Difference In Time Spent<br>On Selected Activities\",\n      yaxis_title=\"Minutes Per Month\",\n      xaxis_title=\"Activity\",\n      showlegend=False,  # Hide the legend\n    ),\n  )\n\n  # Calculate the midpoint for the vertical dividing line\n  num_activities = len(df_indiv_filtered_total.index)  # Total number of activities\n  middle_index = num_activities / 2 - 0.5  # Middle index for the line\n\n  # Dynamically calculate the y-axis range\n  y_min = (\n    df_indiv_filtered_total[\"difference\"].min() - 10\n  )  # Extend below the lowest value\n  y_max = (\n    df_indiv_filtered_total[\"difference\"].max() + 10\n  )  # Extend above the highest value\n\n  # Add the vertical line to divide the chart\n  indiv_fig_difference_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,  # Centered position for the line\n    y0=y_min,\n    y1=y_max,  # Extend the line to cover the entire y-axis range\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Add annotations for \"Valued Activities\" and \"Non-Valued Activities\"\n  indiv_fig_difference_time.add_annotation(\n    x=middle_index / 2,  # Centered over the left group\n    y=y_max + 50,  # Position slightly above the tallest bar\n    text=\"Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",  # Align relative to the x-axis data\n    yref=\"y\",  # Align relative to the y-axis data\n  )\n\n  indiv_fig_difference_time.add_annotation(\n    x=(middle_index + num_activities) / 2,  # Centered over the right group\n    y=y_max + 50,  # Position slightly above the tallest bar\n    text=\"Non-Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",  # Align relative to the x-axis data\n    yref=\"y\",  # Align relative to the y-axis data\n  )\n\n  # Rotate x-axis labels and format y-axis values\n  indiv_fig_difference_time.update_xaxes(tickangle=90)\n  indiv_fig_difference_time.update_yaxes(tickformat=\",.0f\")\n\n  return indiv_fig_difference_time\n\n\n@anvil.server.callable\ndef create_barfig_indiv_combo_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"indiv_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"indiv_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"indiv_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_indiv_filtered_total.index = plot_df_index\n\n  # Create the combined bar plot for initial and adjusted health\n  indiv_fig_dual_time = go.Figure(\n    data=[\n      go.Bar(\n        name=\"Before Intervention\",\n        x=df_indiv_filtered_total.index,\n        y=df_indiv_filtered_total[\"initial_health\"],\n        offsetgroup=0,\n        marker=dict(color=\"red\"),\n      ),\n      go.Bar(\n        name=\"After Intervention\",\n        x=df_indiv_filtered_total.index,\n        y=df_indiv_filtered_total[\"adjusted_health\"],\n        offsetgroup=1,\n        marker=dict(color=\"blue\"),\n      ),\n    ],\n    layout=go.Layout(\n      title=\"Time Spent On<br>Selected Activities\",\n      yaxis_title=\"Minutes Per Month\",\n      xaxis_title=\"Activity\",\n      showlegend=True,  # Retain the legend\n    ),\n  )\n\n  # Calculate the midpoint for the vertical dividing line\n  num_activities = len(df_indiv_filtered_total.index)  # Total number of activities\n  middle_index = num_activities / 2 - 0.5  # Middle index for the line\n\n  # Dynamically calculate the y-axis range\n  y_min = min(\n    df_indiv_filtered_total[[\"initial_health\", \"adjusted_health\"]].min().min() - 10,\n    0,\n  )  # Extend below the lowest value\n  y_max = (\n    df_indiv_filtered_total[[\"initial_health\", \"adjusted_health\"]].max().max() + 10\n  )  # Extend above the highest value\n\n  # Add the vertical line to divide the chart\n  indiv_fig_dual_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,  # Centered position for the line\n    y0=y_min,\n    y1=y_max,  # Extend the line to cover the entire y-axis range\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Calculate the max bar heights for the two groups\n  left_group_max = (\n    df_indiv_filtered_total.iloc[: int(middle_index)][\n      [\"initial_health\", \"adjusted_health\"]\n    ]\n    .max()\n    .max()\n  )\n  right_group_max = (\n    df_indiv_filtered_total.iloc[int(middle_index) :][\n      [\"initial_health\", \"adjusted_health\"]\n    ]\n    .max()\n    .max()\n  )\n\n  # Add annotations for \"Valued Activities\" and \"Non-Valued Activities\"\n  indiv_fig_dual_time.add_annotation(\n    x=middle_index / 2,  # Centered over the left group\n    y=y_max + 500,  # Position above the tallest bar in the left group\n    text=\"Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",  # Align relative to the x-axis data\n    yref=\"y\",  # Align relative to the y-axis data\n  )\n\n  indiv_fig_dual_time.add_annotation(\n    x=(middle_index + num_activities) / 2,  # Centered over the right group\n    y=y_max + 500,  # Position above the tallest bar in the right group\n    text=\"Non-Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",  # Align relative to the x-axis data\n    yref=\"y\",  # Align relative to the y-axis data\n  )\n\n  # Rotate x-axis labels and format y-axis values\n  indiv_fig_dual_time.update_xaxes(tickangle=90)\n  indiv_fig_dual_time.update_yaxes(tickformat=\",.0f\")\n\n  return indiv_fig_dual_time\n\n\n@anvil.server.callable\ndef create_indiv_stacked_piefig_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"indiv_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"indiv_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"indiv_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_indiv_filtered_total.index = plot_df_index\n\n  # Create the stacked pie chart for initial and adjusted health\n  data = [\n    go.Pie(\n      labels=df_indiv_filtered_total.index,\n      values=df_indiv_filtered_total[\"initial_health\"].astype(int),\n      domain={\"x\": [0.3, 0.7], \"y\": [0.2, 0.8]},\n      hole=0.5,\n      direction=\"clockwise\",\n      sort=False,\n      title=dict(text=\"Before\", position=\"top center\"),\n      # textinfo='label+value+percent',\n      # texttemplate='%{label}: %{value:.0f}'\n    ),\n    go.Pie(\n      labels=df_indiv_filtered_total.index,\n      values=df_indiv_filtered_total[\"adjusted_health\"].astype(int),\n      domain={\"x\": [0.1, 0.9], \"y\": [0, 1]},\n      hole=0.75,\n      direction=\"clockwise\",\n      sort=False,\n      title=dict(text=\"After\", position=\"top center\"),\n      # textinfo='label+value+percent',\n      # texttemplate='%{label}: %{value:.0f}'\n    ),\n  ]\n  figure = go.Figure(\n    data=data,\n    layout={\n      \"title\": \"Breakdown Of Time Spent<br>On Selected Activities\"\n      + \"<br>\"\n      + '<span style=\"font-size: 12px;\">Before Intervention (Inner Circle)</span>'\n      + \"<br>\"\n      + '<span style=\"font-size: 12px;\">After Intervention (Outer Circle)</span>'\n    },\n  )\n  figure.update_traces(textposition=\"inside\")\n  figure.update_layout(uniformtext_minsize=12, uniformtext_mode=\"hide\")\n  return figure\n\n\n@anvil.server.callable\ndef create_indiv_difference_time_pie():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"indiv_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"indiv_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"indiv_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_indiv_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_indiv_filtered_total.index = plot_df_index\n\n  # Create the pie chart for difference in health\n  df_filtered = df_indiv_filtered_total.copy()\n  df_filtered[\"difference\"] = df_filtered[\"difference\"].abs().astype(int)\n  fig = px.pie(\n    df_filtered,\n    names=df_filtered.index,\n    values=\"difference\",\n    title=\"Difference in TimeSpent<br>On Selected Activities<br>(In Absolute Values)\",\n  )\n  return fig\n\n\n@anvil.server.callable\ndef create_indiv_name_text():\n  # Retrieve data from session\n  indiv_name = anvil.server.session.get(\"indiv_user_selections\", {}).get(\"indiv_name\")\n  if not indiv_name:\n    raise ValueError(\"Individual name not found in session.\")\n  return indiv_name\n\n\n@anvil.server.callable\ndef create_indiv_initial_rank():\n  # Retrieve data from session\n  indiv_initial = anvil.server.session.get(\"indiv_user_selections\", {}).get(\n    \"indiv_initial\"\n  )\n  if not indiv_initial:\n    raise ValueError(\"Initial rank not found in session.\")\n  return indiv_initial\n\n\n@anvil.server.callable\ndef create_indiv_adjusted_rank():\n  # Retrieve data from session\n  indiv_adjusted = anvil.server.session.get(\"indiv_user_selections\", {}).get(\n    \"indiv_adjusted\"\n  )\n  if not indiv_adjusted:\n    raise ValueError(\"Adjusted rank not found in session.\")\n  return indiv_adjusted\n\n\n@anvil.server.callable\ndef create_indiv_initial_value():\n  # Retrieve the pre-calculated total initial value from the session\n  indiv_total_initial_value = anvil.server.session.get(\"indiv_total_initial_value\")\n  if indiv_total_initial_value is None:\n    raise ValueError(\"Initial value not found in session.\")\n  return indiv_total_initial_value\n\n\n@anvil.server.callable\ndef create_indiv_adjusted_value():\n  # Retrieve the pre-calculated total adjusted value from the session\n  indiv_total_adjusted_value = anvil.server.session.get(\"indiv_total_adjusted_value\")\n  if indiv_total_adjusted_value is None:\n    raise ValueError(\"Adjusted value not found in session.\")\n  return indiv_total_adjusted_value\n\n\n@anvil.server.callable\ndef create_indiv_difference_value():\n  # Retrieve the pre-calculated total difference value from the session\n  indiv_total_difference_value = anvil.server.session.get(\n    \"indiv_total_difference_value\"\n  )\n  if indiv_total_difference_value is None:\n    raise ValueError(\"Difference value not found in session.\")\n  return indiv_total_difference_value\n\n\n@anvil.server.callable\ndef create_indiv_initial_time():\n  # Retrieve the DataFrame from session and calculate the initial time total\n  indiv_total_initial_time = anvil.server.session.get(\"indiv_total_initial_time\")\n  if indiv_total_initial_time is None:\n    raise ValueError(\"Difference value not found in session.\")\n  return anvil.server.session[\"indiv_total_initial_time\"]\n\n\n@anvil.server.callable\ndef create_indiv_adjusted_time():\n  # Retrieve the DataFrame from session and calculate the adjusted time total\n  plot_df_data = anvil.server.session.get(\"indiv_total_adjusted_time\")\n  if not plot_df_data:\n    raise ValueError(\"No DataFrame found in session for adjusted time.\")\n  return anvil.server.session[\"indiv_total_adjusted_time\"]\n\n\n@anvil.server.callable\ndef create_indiv_difference_time():\n  # Retrieve the DataFrame from session and calculate the time difference total\n  indiv_total_difference_time = anvil.server.session.get(\"indiv_total_difference_time\")\n  if not indiv_total_difference_time:\n    raise ValueError(\"No DataFrame found in session for time difference.\")\n  return anvil.server.session[\"indiv_total_difference_time\"]\n\n\n@anvil.server.callable\ndef create_indiv_initial_time_money():\n  # Retrieve the DataFrame from session and return the initial value for relevant activities\n  indiv_total_initial_time_money = anvil.server.session.get(\n    \"indiv_total_initial_time_money\"\n  )\n  if not indiv_total_initial_time_money:\n    raise ValueError(\"No DataFrame found in session for time difference.\")\n  return anvil.server.session[\"indiv_total_initial_time_money\"]\n\n\n@anvil.server.callable\ndef create_indiv_adjusted_time_money():\n  # Retrieve the DataFrame from session and return the adjusted value for relevant activities\n  indiv_total_adjusted_time_money = anvil.server.session.get(\n    \"indiv_total_adjusted_time_money\"\n  )\n  if not indiv_total_adjusted_time_money:\n    raise ValueError(\"No DataFrame found in session for time difference.\")\n  return anvil.server.session[\"indiv_total_adjusted_time_money\"]\n\n\n@anvil.server.callable\ndef create_indiv_difference_time_money():\n  # Retrieve the DataFrame from session and return the difference value for relevant activities\n  indiv_total_difference_time_money = anvil.server.session.get(\n    \"indiv_total_difference_time_money\"\n  )\n  if not indiv_total_difference_time_money:\n    raise ValueError(\"No DataFrame found in session for time difference.\")\n  return anvil.server.session[\"indiv_total_difference_time_money\"]\n\n\n# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Population Codeset\n# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n@anvil.server.callable\ndef pop_store_user_selection(pop_user_selection):\n  # Store data in server session\n  anvil.server.session[\"pop_user_selections\"] = pop_user_selection\n\n\n@anvil.server.callable\ndef run_pop_code():\n  # general data manipulations\n  # Create/Clean raw DF for pop data\n  df_pop_raw = pd.read_csv(data_files[\"pop_raw_values_all.csv\"])\n  # change country to correct version\n  df_pop_raw[\"country\"] = (\n    df_pop_raw[\"country\"]\n    .astype(str)\n    .replace(\n      {\n        \"BE\": \"Belgium\",\n        \"EE\": \"Estonia\",\n        \"FI\": \"Finland\",\n        \"FR\": \"France\",\n        \"EL\": \"Greece\",\n        \"RO\": \"Romania\",\n        \"RS\": \"Serbia\",\n        \"UK\": \"United Kingdom\",\n      }\n    )\n  )\n  # change age to correct version\n  df_pop_raw[\"age_group\"] = (\n    df_pop_raw[\"age_group\"]\n    .astype(str)\n    .replace({\"55_64\": \"55-64\", \"65_74\": \"65-74\", \"75_more\": \"75+\"})\n  )\n  # change health group to correct version\n  df_pop_raw[\"group\"] = (\n    df_pop_raw[\"group\"]\n    .astype(str)\n    .replace({\"good\": \"Good\", \"fair\": \"Fair\", \"bad\": \"Poor\"})\n  )\n  # drop 'group_col' and set up raw DF\n  df_pop_raw = df_pop_raw.drop([\"group_col\"], axis=1)\n  df_pop_raw.set_index(\"activity\", inplace=True)\n  df_pop_raw[\"predicted\"] = df_pop_raw[\"predicted\"].astype(int)\n  print('RAW DF\"')\n  print(df_pop_raw)\n  print(\"RAW DF COLOUMN 'group'\")\n  print(df_pop_raw[\"group\"])\n  # Retrieve user selections from session\n  pop_selected_dict = anvil.server.session.get(\"pop_user_selections\")\n\n  if not pop_selected_dict:\n    raise ValueError(\"No population user selections found in session.\")\n\n  print(\"Population User Selections:\", pop_selected_dict)\n\n  # Extract population selection variables\n  pop_intervention_name = pop_selected_dict[\"pop_intervention_name\"]\n  pop_country = pop_selected_dict[\"pop_country\"]\n  pop_age = pop_selected_dict[\"pop_age\"]\n  pop_number = int(pop_selected_dict[\"pop_number\"])\n  anvil.server.session[\"pop_number\"] = pop_number\n  pop_initialgood = int(pop_selected_dict[\"pop_initialgood\"])\n  pop_initialfair = int(pop_selected_dict[\"pop_initialfair\"])\n  pop_initialpoor = int(pop_selected_dict[\"pop_initialpoor\"])\n  pop_adjustedgood = int(pop_selected_dict[\"pop_adjustedgood\"])\n  pop_adjustedfair = int(pop_selected_dict[\"pop_adjustedfair\"])\n  pop_adjustedpoor = int(pop_selected_dict[\"pop_adjustedpoor\"])\n\n  # Log the selection set\n  # pop_selection_set = (\n  #     pop_intervention_name,\n  #     pop_country,\n  #     pop_age,\n  #     pop_number,\n  #     pop_initialgood,\n  #     pop_initialfair,\n  #     pop_initialpoor,\n  #     pop_adjustedgood,\n  #     pop_adjustedfair,\n  #     pop_adjustedpoor,\n  # )\n  # print(\"Population Selection Set:\", pop_selection_set)\n  # # Create pop selection variables\n  # pop_selectedvar = app_tables.pop_info.search()\n  # pop_selected_dict = [\n  #   {\n  #     \"pop_name\": r[\"pop_name\"],\n  #     \"pop_country\": r[\"pop_country\"],\n  #     \"pop_age\": r[\"pop_age\"],\n  #     \"pop_number\": r[\"pop_number\"],\n  #     \"pop_initialgood\": r[\"pop_initialgood\"],\n  #     \"pop_initialfair\": r[\"pop_initialfair\"],\n  #     \"pop_initialpoor\": r[\"pop_initialpoor\"],\n  #     \"pop_adjustedgood\": r[\"pop_adjustedgood\"],\n  #     \"pop_adjustedfair\": r[\"pop_adjustedfair\"],\n  #     \"pop_adjustedpoor\": r[\"pop_adjustedpoor\"],\n  #   }\n  #   for r in pop_selectedvar\n  # ]\n  # print(\"POP SELECTION LIST\")\n  # print(pop_selected_dict)\n\n  # # create pop selection DF\n  # df_pop_selectedvar = pd.DataFrame.from_dict(pop_selected_dict)\n  # print(\"POP SELECTION DF\")\n  # print(df_pop_selectedvar)\n\n  # # create individual vlaues for each selection\n  # pop_name = df_pop_selectedvar.at[0, \"pop_name\"]\n  # pop_country = df_pop_selectedvar.at[0, \"pop_country\"]\n  # pop_age = df_pop_selectedvar.at[0, \"pop_age\"]\n  # pop_number = df_pop_selectedvar.at[0, \"pop_number\"]\n  # anvil.server.session['pop_number'] = pop_number\n  # pop_initialgood = int(df_pop_selectedvar.at[0, \"pop_initialgood\"])\n  # print(\"POP INITIALGOOD PERCENT\")\n  # print(pop_initialgood)\n  # pop_initialfair = int(df_pop_selectedvar.at[0, \"pop_initialfair\"])\n  # print(\"POP INITIALFAIR PERCENT\")\n  # print(pop_initialfair)\n  # pop_initialpoor = int(df_pop_selectedvar.at[0, \"pop_initialpoor\"])\n  # print(\"POP INITIALPOOR PERCENT\")\n  # print(pop_initialpoor)\n  # pop_adjustedgood = int(df_pop_selectedvar.at[0, \"pop_adjustedgood\"])\n  # print(\"POP ADJUSTEDGOOD PERCENT\")\n  # print(pop_adjustedgood)\n  # pop_adjustedfair = int(df_pop_selectedvar.at[0, \"pop_adjustedfair\"])\n  # print(\"POP ADJUSTEDFAIR PERCENT\")\n  # print(pop_adjustedfair)\n  # pop_adjustedpoor = int(df_pop_selectedvar.at[0, \"pop_adjustedpoor\"])\n  # print(\"POP ASJUSTEDPOOR PERCENT\")\n  # print(pop_adjustedpoor)\n\n  # Filter raw data with selection criteria\n  pop_selection_set = (\n    pop_intervention_name,\n    pop_country,\n    pop_age,\n    pop_number,\n    pop_initialgood,\n    pop_initialfair,\n    pop_initialpoor,\n    pop_adjustedgood,\n    pop_adjustedfair,\n    pop_adjustedpoor,\n  )\n  print(\"POP SELECTION SET\")\n  print(pop_selection_set)\n\n  # create \"initial good\" numbers DF\n  df_pop_initialgood = df_pop_raw[\n    (df_pop_raw[\"country\"] == pop_country)\n    & (df_pop_raw[\"age_group\"] == pop_age)\n    & (df_pop_raw[\"group\"] == \"Good\")\n  ]\n  # print('POP INITIAL GOOD DF')\n  # print(df_pop_initialgood)\n  df_pop_initialgood_short = df_pop_initialgood.drop(\n    [\"std.error\", \"conf.low\", \"conf.high\", \"age_group\"], axis=1\n  )\n  print(\"POP INITIAL GOOD SHORT DF\")\n  print(df_pop_initialgood_short)\n\n  # create \"initial fair\" numbers DF\n  df_pop_initialfair = df_pop_raw[\n    (df_pop_raw[\"country\"] == pop_country)\n    & (df_pop_raw[\"age_group\"] == pop_age)\n    & (df_pop_raw[\"group\"] == \"Fair\")\n  ]\n  # print('POP INITIAL FAIR DF')\n  # print(df_pop_initialfair)\n  df_pop_initialfair_short = df_pop_initialfair.drop(\n    [\"std.error\", \"conf.low\", \"conf.high\", \"age_group\"], axis=1\n  )\n  print(\"POP INITIAL FAIR SHORT DF\")\n  print(df_pop_initialfair_short)\n\n  # create \"initial poor\" numbers DF\n  df_pop_initialpoor = df_pop_raw[\n    (df_pop_raw[\"country\"] == pop_country)\n    & (df_pop_raw[\"age_group\"] == pop_age)\n    & (df_pop_raw[\"group\"] == \"Poor\")\n  ]\n  # print('POP INITIAL POOR DF')\n  # print(df_pop_initialpoor)\n  df_pop_initialpoor_short = df_pop_initialpoor.drop(\n    [\"std.error\", \"conf.low\", \"conf.high\", \"age_group\"], axis=1\n  )\n  print(\"POP INITIAL POOR SHORT DF\")\n  print(df_pop_initialpoor_short)\n  # create 'adjustedgood' numbers DF\n  df_pop_adjustedgood = df_pop_raw[\n    (df_pop_raw[\"country\"] == pop_country)\n    & (df_pop_raw[\"age_group\"] == pop_age)\n    & (df_pop_raw[\"group\"] == \"Good\")\n  ]\n  # print('POP ADJUSTED GOOD DF')\n  # print(df_pop_adjustedgood)\n\n  df_pop_adjustedgood_short = df_pop_adjustedgood.drop(\n    [\"std.error\", \"conf.low\", \"conf.high\", \"age_group\"], axis=1\n  )\n  print(\"POP ADJUSTED GOOD SHORT DF\")\n  print(df_pop_adjustedgood_short)\n\n  # create 'adjustedfair' numbers DF\n  df_pop_adjustedfair = df_pop_raw[\n    (df_pop_raw[\"country\"] == pop_country)\n    & (df_pop_raw[\"age_group\"] == pop_age)\n    & (df_pop_raw[\"group\"] == \"Fair\")\n  ]\n  # print(POP ADJUSTED FAIR DF')\n  # print(df_pop_adjustedfair)\n  df_pop_adjustedfair_short = df_pop_adjustedfair.drop(\n    [\"std.error\", \"conf.low\", \"conf.high\", \"age_group\"], axis=1\n  )\n  print(\"POP ADJUSTED FAIR SHORT DF\")\n  print(df_pop_adjustedfair_short)\n\n  # create 'adjustedpoor' numbers DF\n  df_pop_adjustedpoor = df_pop_raw[\n    (df_pop_raw[\"country\"] == pop_country)\n    & (df_pop_raw[\"age_group\"] == pop_age)\n    & (df_pop_raw[\"group\"] == \"Poor\")\n  ]\n  print(\"POP ADJUSTED POOR DF\")\n  # print(df_pop_adjustedpoor)\n  df_pop_adjustedpoor_short = df_pop_adjustedpoor.drop(\n    [\"std.error\", \"conf.low\", \"conf.high\", \"age_group\"], axis=1\n  )\n  print(\"POP ADJUSTED POOR SHORT DF\")\n  print(df_pop_adjustedpoor_short)\n\n  # zero out 'predicted' values\n  df_pop_initialgood_short.predicted = np.where(\n    df_pop_initialgood_short.predicted < 0, 0, df_pop_initialgood_short.predicted\n  )\n  df_pop_initialfair_short.predicted = np.where(\n    df_pop_initialfair_short.predicted < 0, 0, df_pop_initialfair_short.predicted\n  )\n  df_pop_initialpoor_short.predicted = np.where(\n    df_pop_initialpoor_short.predicted < 0, 0, df_pop_initialpoor_short.predicted\n  )\n  df_pop_adjustedgood_short.predicted = np.where(\n    df_pop_adjustedgood_short.predicted < 0, 0, df_pop_adjustedgood_short.predicted\n  )\n  df_pop_adjustedfair_short.predicted = np.where(\n    df_pop_adjustedfair_short.predicted < 0, 0, df_pop_adjustedfair_short.predicted\n  )\n  df_pop_adjustedpoor_short.predicted = np.where(\n    df_pop_adjustedpoor_short.predicted < 0, 0, df_pop_adjustedpoor_short.predicted\n  )\n  print(\"POP INITIAL GOOD SHORT DF(ZEROED)\")\n  print(df_pop_initialgood_short)\n  print(\"POP INITIAL FAIR SHORT DF(ZEROED)\")\n  print(df_pop_initialfair_short)\n  print(\"POP INITIAL POOR SHORT DF(ZEROED)\")\n  print(df_pop_initialpoor_short)\n  print(\"POP ADJUSTED GOOD SHORT DF(ZEROED)\")\n  print(df_pop_adjustedgood_short)\n  print(\"POP ADJUSTED FAIR SHORT DF(ZEROED)\")\n  print(df_pop_adjustedfair_short)\n  print(\"POP ADJSUTED POOR SHORT DF(ZEROED)\")\n  print(df_pop_adjustedpoor_short)\n\n  # create country population values data from: https://ourworldindata.org/grapher/population-by-five-year-age-group?time=2015&country=~BEL\n\n  pop_number_initialgood = int(pop_number) * (int(pop_initialgood) / 100)\n  print(\"POP NUMBER INITIAL GOOD\")\n  print(pop_number_initialgood)\n  pop_number_initialfair = int(pop_number) * (int(pop_initialfair) / 100)\n  print(\"POP NUMBER INITIAL FAIR\")\n  print(pop_number_initialfair)\n  pop_number_initialpoor = int(pop_number) * (int(pop_initialpoor) / 100)\n  print(\"POP NUMBER INITIAL POOR\")\n  print(pop_number_initialpoor)\n  pop_number_adjustedgood = int(pop_number) * (int(pop_adjustedgood) / 100)\n  print(\"POP NUMBER ADJUSTED GOOD\")\n  print(pop_number_adjustedgood)\n  pop_number_adjustedfair = int(pop_number) * (int(pop_adjustedfair) / 100)\n  print(\"POP NUMBER ADJUSTED FAIR\")\n  print(pop_number_adjustedfair)\n  pop_number_adjustedpoor = int(pop_number) * (int(pop_adjustedpoor) / 100)\n  print(\"POP NUMBER ADJUSTED POOR\")\n  print(pop_number_adjustedpoor)\n\n  df_pop_initialgood_short[\"predicted\"] = (\n    df_pop_initialgood_short[\"predicted\"] * pop_number_initialgood\n  )\n  df_pop_initialfair_short[\"predicted\"] = (\n    df_pop_initialfair_short[\"predicted\"] * pop_number_initialfair\n  )\n  df_pop_initialpoor_short[\"predicted\"] = (\n    df_pop_initialpoor_short[\"predicted\"] * pop_number_initialpoor\n  )\n  df_pop_adjustedgood_short[\"predicted\"] = (\n    df_pop_adjustedgood_short[\"predicted\"] * pop_number_adjustedgood\n  )\n  df_pop_adjustedfair_short[\"predicted\"] = (\n    df_pop_adjustedfair_short[\"predicted\"] * pop_number_adjustedfair\n  )\n  df_pop_adjustedpoor_short[\"predicted\"] = (\n    df_pop_adjustedpoor_short[\"predicted\"] * pop_number_adjustedpoor\n  )\n\n  df_pop_initialgood_short.rename(\n    columns={\"predicted\": \"predicted_initialgood\"}, inplace=True\n  )\n  df_pop_initialfair_short.rename(\n    columns={\"predicted\": \"predicted_initialfair\"}, inplace=True\n  )\n  df_pop_initialpoor_short.rename(\n    columns={\"predicted\": \"predicted_initialpoor\"}, inplace=True\n  )\n  df_pop_adjustedgood_short.rename(\n    columns={\"predicted\": \"predicted_adjustedgood\"}, inplace=True\n  )\n  df_pop_adjustedfair_short.rename(\n    columns={\"predicted\": \"predicted_adjustedfair\"}, inplace=True\n  )\n  df_pop_adjustedpoor_short.rename(\n    columns={\"predicted\": \"predicted_adjustedpoor\"}, inplace=True\n  )\n\n  df_pop_initial_final = df_pop_initialgood_short.drop([\"group\", \"country\"], axis=1)\n  df_pop_initial_final[\"predicted_initialfair\"] = df_pop_initialfair_short[\n    \"predicted_initialfair\"\n  ].values\n  df_pop_initial_final[\"predicted_initialpoor\"] = df_pop_initialpoor_short[\n    \"predicted_initialpoor\"\n  ].values\n  df_pop_initial_final[\"predicted_initialtotal\"] = (\n    df_pop_initialgood_short[\"predicted_initialgood\"].values\n    + df_pop_initialfair_short[\"predicted_initialfair\"].values\n    + df_pop_initialpoor_short[\"predicted_initialpoor\"].values\n  )\n  print(\"INITIAL TOTAL FINAL\")\n  print(df_pop_initial_final)\n  df_pop_adjusted_final = df_pop_adjustedgood_short.drop([\"group\", \"country\"], axis=1)\n  df_pop_adjusted_final[\"predicted_adjustedfair\"] = df_pop_adjustedfair_short[\n    \"predicted_adjustedfair\"\n  ].values\n  df_pop_adjusted_final[\"predicted_adjustedpoor\"] = df_pop_adjustedpoor_short[\n    \"predicted_adjustedpoor\"\n  ].values\n  df_pop_adjusted_final[\"predicted_adjustedtotal\"] = (\n    df_pop_adjustedgood_short[\"predicted_adjustedgood\"].values\n    + df_pop_adjustedfair_short[\"predicted_adjustedfair\"].values\n    + df_pop_adjustedpoor_short[\"predicted_adjustedpoor\"].values\n  )\n  print(\"ADJUSTED TOTAL FINAL\")\n  print(df_pop_adjusted_final)\n\n  df_pop_final = pd.concat([df_pop_initial_final, df_pop_adjusted_final], axis=1)\n  df_pop_final[\"difference\"] = (\n    df_pop_final[\"predicted_adjustedtotal\"].values\n    - df_pop_final[\"predicted_initialtotal\"].values\n  )\n  print(\"POP TOTAL DF (WHOLE)\")\n\n  print(df_pop_final)\n  df_pop_final_short = df_pop_final.drop(\n    [\n      \"predicted_initialfair\",\n      \"predicted_initialpoor\",\n      \"predicted_initialgood\",\n      \"predicted_adjustedfair\",\n      \"predicted_adjustedpoor\",\n      \"predicted_adjustedgood\",\n    ],\n    axis=1,\n  )\n  print(\"POP TOTAL DF (SHORT)\")\n  print(df_pop_final_short)\n\n  df_pop_final_moneytime = df_pop_final.drop(\n    [\n      \"Employment\",\n      \"HobbiesComputing\",\n      \"MassMedia\",\n      \"ParticipatoryActivities\",\n      \"PersonalCare\",\n      \"SocialLifeEntertainment\",\n      \"SportsOutdoor\",\n      \"Study\",\n    ]\n  )\n  print(\"POP MONEY TIME DF\")\n  print(df_pop_final_moneytime)\n\n  # pop_selected_moneyvalues = app_tables.money_values.search()\n  pop_moneyvalues_dict = [\n    {\n      \"AdultCare\": r[\"adultcare\"],\n      \"ChildCare\": r[\"childcare\"],\n      \"Clothing\": r[\"clothing\"],\n      \"Housing\": r[\"housing\"],\n      \"Laundry\": r[\"laundry\"],\n      \"Nutrition\": r[\"nutrition\"],\n      \"Transport\": r[\"transport\"],\n      \"Voluntary\": r[\"voluntaryactivity\"],\n    }\n    for r in pop_selected_moneyvalues\n  ]\n  df_pop_moneyvalues = pd.DataFrame.from_dict(pop_moneyvalues_dict)\n  df_pop_moneyvalues = df_pop_moneyvalues.astype(float)\n  df_pop_moneyvalues = df_pop_moneyvalues.transpose()\n  df_pop_moneyvalues.index.name = \"activity\"\n  df_pop_moneyvalues\n\n  print(\"POP MONEY VALUES (SELECTED)\")\n  print(df_pop_moneyvalues)\n\n  df_pop_money_multiplied = df_pop_final_moneytime.copy()\n  df_pop_money_multiplied = df_pop_money_multiplied.astype(float)\n  print(\"POP MONEY DF (NOT MULTIPLIED)\")\n  print(df_pop_money_multiplied)\n\n  adultcare_value = df_pop_moneyvalues.loc[\"AdultCare\"][0]\n  print(\"adultcare value\")\n  print(adultcare_value)\n  childcare_value = df_pop_moneyvalues.loc[\"ChildCare\"][0]\n  clothing_value = df_pop_moneyvalues.loc[\"Clothing\"][0]\n  housing_value = df_pop_moneyvalues.loc[\"Housing\"][0]\n  laundry_value = df_pop_moneyvalues.loc[\"Laundry\"][0]\n  nutrition_value = df_pop_moneyvalues.loc[\"Nutrition\"][0]\n  transport_value = df_pop_moneyvalues.loc[\"Transport\"][0]\n  voluntary_value = df_pop_moneyvalues.loc[\"Voluntary\"][0]\n\n  df_pop_money_multiplied.loc[\"AdultCare\"] = (\n    (df_pop_money_multiplied.loc[\"AdultCare\"] / 60) * adultcare_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"ChildCare\"] = (\n    (df_pop_money_multiplied.loc[\"ChildCare\"] / 60) * childcare_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"Clothing\"] = (\n    (df_pop_money_multiplied.loc[\"Clothing\"] / 60) * clothing_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"Housing\"] = (\n    (df_pop_money_multiplied.loc[\"Housing\"] / 60) * housing_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"Laundry\"] = (\n    (df_pop_money_multiplied.loc[\"Laundry\"] / 60) * laundry_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"Nutrition\"] = (\n    (df_pop_money_multiplied.loc[\"Nutrition\"] / 60) * nutrition_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"Transport\"] = (\n    (df_pop_money_multiplied.loc[\"Transport\"] / 60) * transport_value\n  ) * 12\n  df_pop_money_multiplied.loc[\"Voluntary\"] = (\n    (df_pop_money_multiplied.loc[\"Voluntary\"] / 60) * voluntary_value\n  ) * 12\n\n  print(\"POP MONEY DF (MULTIPLIED)\")\n  print(df_pop_money_multiplied)\n\n  # dictionary of total values to pop filtered DF\n\n  pop_total_initial_time = df_pop_final[\"predicted_initialtotal\"].sum()\n  anvil.server.session[\"pop_total_initial_time\"] = pop_total_initial_time\n  pop_total_adjusted_time = df_pop_final[\"predicted_adjustedtotal\"].sum()\n  anvil.server.session[\"pop_total_adjusted_time\"] = pop_total_adjusted_time\n  pop_total_difference_time = df_pop_final[\"difference\"].sum()\n  anvil.server.session[\"pop_total_difference_time\"] = pop_total_difference_time\n  pop_time_totals = {\n    \"predicted_initialtotal\": pop_total_initial_time,\n    \"predicted_adjustedtotal\": pop_total_adjusted_time,\n    \"difference\": pop_total_difference_time,\n  }\n  print(\"TIME TOTALS\")\n  print(pop_time_totals)\n\n  pop_total_initial_moneytime = df_pop_final_moneytime[\"predicted_initialtotal\"].sum()\n  anvil.server.session[\"pop_total_initial_moneytime\"] = pop_total_initial_moneytime\n  pop_total_adjusted_moneytime = df_pop_final_moneytime[\"predicted_adjustedtotal\"].sum()\n  anvil.server.session[\"pop_total_adjusted_moneytime\"] = pop_total_adjusted_moneytime\n  pop_total_difference_moneytime = df_pop_final_moneytime[\"difference\"].sum()\n  anvil.server.session[\"pop_total_difference_moneytime\"] = (\n    pop_total_difference_moneytime\n  )\n  pop_moneytime_totals = {\n    \"predicted_initialtotal\": pop_total_initial_moneytime,\n    \"predicted_adjustedtotal\": pop_total_adjusted_moneytime,\n    \"difference\": pop_total_difference_moneytime,\n  }\n  print(\"TIME (short) TOTALS\")\n  print(pop_moneytime_totals)\n\n  pop_total_initial_moneyvalue = df_pop_money_multiplied[\"predicted_initialtotal\"].sum()\n  anvil.server.session[\"pop_total_initial_moneyvalue\"] = pop_total_initial_moneyvalue\n  pop_total_adjusted_moneyvalue = df_pop_money_multiplied[\n    \"predicted_adjustedtotal\"\n  ].sum()\n  anvil.server.session[\"pop_total_adjusted_moneyvalue\"] = pop_total_adjusted_moneyvalue\n  pop_total_difference_moneyvalue = df_pop_money_multiplied[\"difference\"].sum()\n  anvil.server.session[\"pop_total_difference_moneyvalue\"] = (\n    pop_total_difference_moneyvalue\n  )\n  pop_moneyvalue_totals = {\n    \"predicted_initialtotal\": pop_total_initial_moneyvalue,\n    \"predicted_adjustedtotal\": pop_total_adjusted_moneyvalue,\n    \"difference\": pop_total_difference_moneyvalue,\n  }\n  print(\"MONEY TOTALS\")\n  print(pop_moneyvalue_totals)\n\n  # population_data_processed = True\n  anvil.server.session[\"pop_total_plot_df\"] = df_pop_final_short.to_dict(\"records\")\n  anvil.server.session[\"pop_total_plot_df_columns\"] = list(df_pop_final_short.columns)\n  anvil.server.session[\"pop_total_plot_df_index\"] = list(df_pop_final_short.index)\n  print(\"END OF CURRENT STUFF\")\n\n\n# -----------------------population visuals\n\n\n@anvil.server.callable\ndef create_barfig_pop_initial_time():\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  data = df_pop_filtered_total\n  pop_fig_initial_time = px.bar(\n    data,\n    x=df_pop_filtered_total.index,\n    y=\"predicted_initialtotal\",\n    title=\"Before Intervention Time Spent<br>On Non-Market Productive Activities\",\n    color_discrete_sequence=[\"red\"],\n    labels={\"activity\": \"Activity\", \"predicted_initialtotal\": \"Minutes Per Month\"},\n  )\n  pop_fig_initial_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_initial_time\n\n\n# pop adjusted time barchart\n@anvil.server.callable\ndef create_barfig_pop_adjusted_time():\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  data = df_pop_filtered_total\n  pop_fig_adjusted_time = px.bar(\n    data,\n    x=df_pop_filtered_total.index,\n    y=\"predicted_adjustedtotal\",\n    title=\"Before Intervention Time Spent<br>On Non-Market Productive Activities\",\n    color_discrete_sequence=[\"blue\"],\n    labels={\"activity\": \"Activity\", \"predicted_adjustedtotal\": \"Minutes Per Month\"},\n  )\n  pop_fig_adjusted_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_adjusted_time\n\n\n@anvil.server.callable\ndef create_barfig_pop_difference_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  # Reorder the DataFrame to match the reference order\n  reference_order = [\n    \"AdultCare\",\n    \"ChildCare\",\n    \"Clothing\",\n    \"Housing\",\n    \"Laundry\",\n    \"Nutrition\",\n    \"Transport\",\n    \"Voluntary\",\n    \"Employment\",\n    \"MassMedia\",\n    \"HobbiesComputing\",\n    \"ParticipatoryActivities\",\n    \"PersonalCare\",\n    \"SocialLifeEntertainment\",\n    \"SportsOutdoor\",\n    \"Study\",\n  ]\n  df_pop_filtered_total = df_pop_filtered_total.reindex(reference_order)\n\n  # Create the bar plot\n  pop_fig_difference_time = go.Figure(\n    data=[\n      go.Bar(\n        name=\"Difference\",\n        x=df_pop_filtered_total.index,\n        y=df_pop_filtered_total[\"difference\"],\n        marker=dict(color=\"purple\"),\n      )\n    ],\n    layout=go.Layout(\n      title=\"Difference In Time Spent<br>On Selected Activities (Population)\",\n      yaxis_title=\"Minutes Per Month\",\n      xaxis_title=\"Activity\",\n      showlegend=False,  # Hide the legend\n    ),\n  )\n\n  # Dynamically calculate the middle index for the dividing line\n  num_activities = len(reference_order)\n  middle_index = (num_activities - 1) / 2  # Middle of the chart\n\n  # Dynamically calculate the y-axis range\n  y_min = df_pop_filtered_total[\"difference\"].min() - 10\n  y_max = df_pop_filtered_total[\"difference\"].max() + 10\n\n  # Add the vertical line to divide the chart\n  pop_fig_difference_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,\n    y0=y_min,\n    y1=y_max,\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Add annotations for \"Monetizable Activities\" and \"Non-Monetizable Activities\"\n  pop_fig_difference_time.add_annotation(\n    x=middle_index / 2,  # Place the text in the middle of the first half\n    y=y_max + 50,\n    text=\"Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",\n    yref=\"y\",\n  )\n\n  pop_fig_difference_time.add_annotation(\n    x=(middle_index + num_activities)\n    / 2,  # Place the text in the middle of the second half\n    y=y_max + 50,\n    text=\"Non-Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",\n    yref=\"y\",\n  )\n\n  pop_fig_difference_time.update_xaxes(tickangle=90)\n  pop_fig_difference_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_difference_time\n\n\n# pop dual time barchart\n\n\n@anvil.server.callable\ndef create_barfig_pop_combo_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  # Reorder the DataFrame to match the reference order\n  reference_order = [\n    \"AdultCare\",\n    \"ChildCare\",\n    \"Clothing\",\n    \"Housing\",\n    \"Laundry\",\n    \"Nutrition\",\n    \"Transport\",\n    \"Voluntary\",\n    \"Employment\",\n    \"MassMedia\",\n    \"HobbiesComputing\",\n    \"ParticipatoryActivities\",\n    \"PersonalCare\",\n    \"SocialLifeEntertainment\",\n    \"SportsOutdoor\",\n    \"Study\",\n  ]\n  df_pop_filtered_total = df_pop_filtered_total.reindex(reference_order)\n\n  # Create the combined bar plot\n  pop_fig_dual_time = go.Figure(\n    data=[\n      go.Bar(\n        name=\"Before Intervention\",\n        x=df_pop_filtered_total.index,\n        y=df_pop_filtered_total[\"predicted_initialtotal\"],\n        offsetgroup=0,\n        marker=dict(color=\"red\"),\n      ),\n      go.Bar(\n        name=\"After Intervention\",\n        x=df_pop_filtered_total.index,\n        y=df_pop_filtered_total[\"predicted_adjustedtotal\"],\n        offsetgroup=1,\n        marker=dict(color=\"blue\"),\n      ),\n    ],\n    layout=go.Layout(\n      title=\"Time Spent On<br>Selected Activities (Population)\",\n      yaxis_title=\"Minutes Per Month\",\n      xaxis_title=\"Activity\",\n      showlegend=True,  # Show the legend\n    ),\n  )\n\n  # Dynamically calculate the middle index for the dividing line\n  num_activities = len(reference_order)\n  middle_index = (num_activities - 1) / 2  # Middle of the chart\n\n  # Dynamically calculate the y-axis range\n  y_min = min(\n    df_pop_filtered_total[[\"predicted_initialtotal\", \"predicted_adjustedtotal\"]]\n    .min()\n    .min()\n    - 10,\n    0,\n  )\n  y_max = (\n    df_pop_filtered_total[[\"predicted_initialtotal\", \"predicted_adjustedtotal\"]]\n    .max()\n    .max()\n    + 10\n  )\n\n  # Add the vertical line to divide the chart\n  pop_fig_dual_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,\n    y0=y_min,\n    y1=y_max,\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Add annotations for \"Monetizable Activities\" and \"Non-Monetizable Activities\"\n  pop_fig_dual_time.add_annotation(\n    x=middle_index / 2,  # Place the text in the middle of the first half\n    y=y_max + 50,\n    text=\"Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",\n    yref=\"y\",\n  )\n\n  pop_fig_dual_time.add_annotation(\n    x=(middle_index + num_activities)\n    / 2,  # Place the text in the middle of the second half\n    y=y_max + 50,\n    text=\"Non-Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",\n    yref=\"y\",\n  )\n\n  pop_fig_dual_time.update_xaxes(tickangle=90)\n  pop_fig_dual_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_dual_time\n\n\n# pop stacked pie chart\n@anvil.server.callable\ndef create_pop_stacked_piefig_time():\n  # Retrieve the DataFrame from session and reconstruct it\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  # Create the stacked pie chart for initial and adjusted health\n  data = [\n    go.Pie(\n      labels=df_pop_filtered_total.index,\n      values=df_pop_filtered_total[\"predicted_initialtotal\"].astype(int),\n      domain={\"x\": [0.3, 0.7], \"y\": [0.2, 0.8]},\n      hole=0.5,\n      direction=\"clockwise\",\n      sort=False,\n      title=dict(text=\"Before\", position=\"top center\"),\n    ),\n    go.Pie(\n      labels=df_pop_filtered_total.index,\n      values=df_pop_filtered_total[\"predicted_adjustedtotal\"].astype(int),\n      domain={\"x\": [0.1, 0.9], \"y\": [0, 1]},\n      hole=0.75,\n      direction=\"clockwise\",\n      sort=False,\n      title=dict(text=\"After\", position=\"top center\"),\n    ),\n  ]\n  figure = go.Figure(\n    data=data,\n    layout={\n      \"title\": \"Breakdown Of Time Spent<br>On Selected Activities\"\n      + \"<br>\"\n      + '<span style=\"font-size: 12px;\">Before Intervention (Inner Circle)</span>'\n      + \"<br>\"\n      + '<span style=\"font-size: 12px;\">After Intervention (Outer Circle)</span>'\n    },\n  )\n  figure.update_traces(textposition=\"inside\")\n  figure.update_layout(uniformtext_minsize=12, uniformtext_mode=\"hide\")\n  return figure\n\n\n@anvil.server.callable\ndef create_barfig_pop_initial_time_single():\n  pop_number = anvil.server.session[\"pop_number\"]\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n  df_pop_filtered_total[\"predicted_initialtotal\"] = (\n    df_pop_filtered_total[\"predicted_initialtotal\"] / pop_number\n  )\n  data = df_pop_filtered_total\n  pop_fig_initial_time = px.bar(\n    data,\n    x=df_pop_filtered_total.index,\n    y=\"predicted_initialtotal\",\n    title=\"Before Intervention Time Spent<br>On Non-Market Productive Activities\",\n    color_discrete_sequence=[\"red\"],\n    labels={\"activity\": \"Activity\", \"predicted_initialtotal\": \"Minutes Per Month\"},\n  )\n  pop_fig_initial_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_initial_time\n\n\n# pop adjusted time barchart\n@anvil.server.callable\ndef create_barfig_pop_adjusted_time_single():\n  pop_number = anvil.server.session[\"pop_number\"]\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n  df_pop_filtered_total[\"predicted_adjustedtotal\"] = (\n    df_pop_filtered_total[\"predicted_adjustedtotal\"] / pop_number\n  )\n  data = df_pop_filtered_total\n  pop_fig_adjusted_time = px.bar(\n    data,\n    x=df_pop_filtered_total.index,\n    y=\"predicted_adjustedtotal\",\n    title=\"Before Intervention Time Spent<br>On Non-Market Productive Activities\",\n    color_discrete_sequence=[\"blue\"],\n    labels={\"activity\": \"Activity\", \"predicted_adjustedtotal\": \"Minutes Per Month\"},\n  )\n  pop_fig_adjusted_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_adjusted_time\n\n\n# pop difference time barchart\n@anvil.server.callable\ndef create_barfig_pop_difference_time_single():\n  # Retrieve session variables\n  pop_number = anvil.server.session[\"pop_number\"]\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  # Normalize the \"difference\" column\n  df_pop_filtered_total[\"difference\"] = df_pop_filtered_total[\"difference\"] / pop_number\n\n  # Define the reference order of activities\n  reference_order = [\n    \"AdultCare\",\n    \"ChildCare\",\n    \"Clothing\",\n    \"Housing\",\n    \"Laundry\",\n    \"Nutrition\",\n    \"Transport\",\n    \"Voluntary\",\n    \"Employment\",\n    \"MassMedia\",\n    \"HobbiesComputing\",\n    \"ParticipatoryActivities\",\n    \"PersonalCare\",\n    \"SocialLifeEntertainment\",\n    \"SportsOutdoor\",\n    \"Study\",\n  ]\n  df_pop_filtered_total = df_pop_filtered_total.reindex(reference_order)\n\n  # Create the bar plot using Plotly Express\n  pop_fig_difference_time = px.bar(\n    df_pop_filtered_total,\n    x=df_pop_filtered_total.index,\n    y=\"difference\",\n    title=\"Difference in Time Spent<br>On Selected Activities\",\n    color_discrete_sequence=[\"purple\"],\n    labels={\"activity\": \"Activity\", \"difference\": \"Minutes Per Month\"},\n  )\n\n  # Dynamically calculate the middle index for the dividing line\n  num_activities = len(reference_order)\n  middle_index = (num_activities - 1) / 2  # Middle of the chart\n\n  # Dynamically calculate the y-axis range\n  y_min = df_pop_filtered_total[\"difference\"].min() - 10\n  y_max = df_pop_filtered_total[\"difference\"].max() + 10\n\n  # Add the vertical line to divide the chart\n  pop_fig_difference_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,\n    y0=y_min,\n    y1=y_max,\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Add annotations for \"Monetizable Activities\" and \"Non-Monetizable Activities\"\n  pop_fig_difference_time.add_annotation(\n    x=middle_index / 2,  # Place the text in the middle of the first half\n    y=y_max + 10,\n    text=\"Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n  )\n\n  pop_fig_difference_time.add_annotation(\n    x=(middle_index + num_activities)\n    / 2,  # Place the text in the middle of the second half\n    y=y_max + 10,\n    text=\"Non-Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n  )\n\n  # Update axes formatting\n  pop_fig_difference_time.update_xaxes(tickangle=90)\n  pop_fig_difference_time.update_yaxes(tickformat=\",.0f\")\n\n  return pop_fig_difference_time\n\n\n# pop dual time barchart\n@anvil.server.callable\ndef create_barfig_pop_combo_time_single():\n  # Retrieve session variables\n  pop_number = anvil.server.session[\"pop_number\"]\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n\n  # Define the reference order of activities\n  reference_order = [\n    \"AdultCare\",\n    \"ChildCare\",\n    \"Clothing\",\n    \"Housing\",\n    \"Laundry\",\n    \"Nutrition\",\n    \"Transport\",\n    \"Voluntary\",\n    \"Employment\",\n    \"MassMedia\",\n    \"HobbiesComputing\",\n    \"ParticipatoryActivities\",\n    \"PersonalCare\",\n    \"SocialLifeEntertainment\",\n    \"SportsOutdoor\",\n    \"Study\",\n  ]\n  df_pop_filtered_total = df_pop_filtered_total.reindex(reference_order)\n\n  # Create the combined bar plot for initial, adjusted, and difference in health\n  pop_fig_dual_time = go.Figure(\n    data=[\n      go.Bar(\n        name=\"Before Intervention\",\n        x=df_pop_filtered_total.index,\n        y=(df_pop_filtered_total[\"predicted_initialtotal\"] / pop_number),\n        offsetgroup=0,\n        marker=dict(color=\"red\"),\n      ),\n      go.Bar(\n        name=\"After Intervention\",\n        x=df_pop_filtered_total.index,\n        y=(df_pop_filtered_total[\"predicted_adjustedtotal\"] / pop_number),\n        offsetgroup=1,\n        marker=dict(color=\"blue\"),\n      ),\n    ],\n    layout=go.Layout(\n      title=\"Time Spent On<br>Selected Activities\",\n      yaxis_title=\"Minutes Per Month\",\n      xaxis_title=\"Activity\",\n    ),\n  )\n\n  # Dynamically calculate the middle index for the dividing line\n  num_activities = len(reference_order)\n  middle_index = (num_activities - 1) / 2  # Middle of the chart\n\n  # Dynamically calculate the y-axis range\n  y_min = min(\n    df_pop_filtered_total[[\"predicted_initialtotal\", \"predicted_adjustedtotal\"]]\n    .min()\n    .min()\n    / pop_number\n    - 10,\n    0,\n  )\n  y_max = (\n    df_pop_filtered_total[[\"predicted_initialtotal\", \"predicted_adjustedtotal\"]]\n    .max()\n    .max()\n    / pop_number\n    + 10\n  )\n\n  # Add the vertical line to divide the chart\n  pop_fig_dual_time.add_shape(\n    type=\"line\",\n    x0=middle_index,\n    x1=middle_index,\n    y0=y_min,\n    y1=y_max,\n    line=dict(color=\"black\", width=2, dash=\"dash\"),\n  )\n\n  # Add annotations for \"Monetizable Activities\" and \"Non-Monetizable Activities\"\n  pop_fig_dual_time.add_annotation(\n    x=middle_index / 2,  # Place the text in the middle of the first half\n    y=y_max + 50,\n    text=\"Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",\n    yref=\"y\",\n  )\n\n  pop_fig_dual_time.add_annotation(\n    x=(middle_index + num_activities)\n    / 2,  # Place the text in the middle of the second half\n    y=y_max + 50,\n    text=\"Non-Monetizable Activities\",\n    showarrow=False,\n    font=dict(size=16, color=\"black\", family=\"Arial\"),\n    align=\"center\",\n    xref=\"x\",\n    yref=\"y\",\n  )\n\n  pop_fig_dual_time.update_xaxes(tickangle=90)\n  pop_fig_dual_time.update_yaxes(tickformat=\",.0f\")\n  return pop_fig_dual_time\n\n\n# pop stacked pie chart\n@anvil.server.callable\ndef create_pop_stacked_piefig_time_single():\n  pop_number = anvil.server.session[\"pop_number\"]\n  plot_df_data = anvil.server.session.get(\"pop_total_plot_df\")\n  plot_df_columns = anvil.server.session.get(\"pop_total_plot_df_columns\")\n  plot_df_index = anvil.server.session.get(\"pop_total_plot_df_index\")\n  if plot_df_data is None or plot_df_columns is None or plot_df_index is None:\n    raise ValueError(\"No DataFrame found in session for plotting\")\n  # Recreate the DataFrame\n  df_pop_filtered_total = pd.DataFrame(plot_df_data, columns=plot_df_columns)\n  df_pop_filtered_total.index = plot_df_index\n  # Create the stacked pie chart for initial and adjusted health\n  data = [\n    go.Pie(\n      labels=df_pop_filtered_total.index,\n      values=(df_pop_filtered_total[\"predicted_initialtotal\"].astype(int) / pop_number),\n      domain={\"x\": [0.3, 0.7], \"y\": [0.2, 0.8]},\n      hole=0.5,\n      direction=\"clockwise\",\n      sort=False,\n      title=dict(text=\"Before\", position=\"top center\"),\n    ),\n    go.Pie(\n      labels=df_pop_filtered_total.index,\n      values=(\n        df_pop_filtered_total[\"predicted_adjustedtotal\"].astype(int) / pop_number\n      ),\n      domain={\"x\": [0.1, 0.9], \"y\": [0, 1]},\n      hole=0.75,\n      direction=\"clockwise\",\n      sort=False,\n      title=dict(text=\"After\", position=\"top center\"),\n    ),\n  ]\n  figure = go.Figure(\n    data=data,\n    layout={\n      \"title\": \"Breakdown Of Time Spent<br> On Selected Activities\"\n      + \"<br>\"\n      + '<span style=\"font-size: 12px;\">Before Intervention (Inner Circle)</span>'\n      + \"<br>\"\n      + '<span style=\"font-size: 12px;\">After Intervention (Outer Circle)</span>'\n    },\n  )\n  figure.update_traces(textposition=\"inside\")\n  figure.update_layout(uniformtext_minsize=12, uniformtext_mode=\"hide\")\n  return figure\n\n\n@anvil.server.callable\ndef create_pop_initial_value():\n  pop_total_initial_moneyvalue = anvil.server.session[\"pop_total_initial_moneyvalue\"]\n  return pop_total_initial_moneyvalue\n\n\n@anvil.server.callable\ndef create_pop_adjusted_value():\n  pop_total_adjusted_moneyvalue = anvil.server.session[\"pop_total_adjusted_moneyvalue\"]\n  return pop_total_adjusted_moneyvalue\n\n\n@anvil.server.callable\ndef create_pop_difference_value():\n  pop_total_difference_moneyvalue = anvil.server.session[\n    \"pop_total_difference_moneyvalue\"\n  ]\n  return pop_total_difference_moneyvalue\n\n\n@anvil.server.callable\ndef create_pop_initial_time():\n  pop_total_initial_time = anvil.server.session[\"pop_total_initial_time\"]\n  return pop_total_initial_time\n\n\n@anvil.server.callable\ndef create_pop_adjusted_time():\n  pop_total_adjusted_time = anvil.server.session[\"pop_total_adjusted_time\"]\n  return pop_total_adjusted_time\n\n\n@anvil.server.callable\ndef create_pop_difference_time():\n  pop_total_difference_time = anvil.server.session[\"pop_total_difference_time\"]\n  return pop_total_difference_time\n\n\n@anvil.server.callable\ndef create_pop_initial_moneytime():\n  pop_total_initial_moneytime = anvil.server.session[\"pop_total_initial_moneytime\"]\n  return pop_total_initial_moneytime\n\n\n@anvil.server.callable\ndef create_pop_adjusted_moneytime():\n  pop_total_adjusted_moneytime = anvil.server.session[\"pop_total_adjusted_moneytime\"]\n  return pop_total_adjusted_moneytime\n\n\n@anvil.server.callable\ndef create_pop_difference_moneytime():\n  pop_total_difference_moneytime = anvil.server.session[\n    \"pop_total_difference_moneytime\"\n  ]\n  return pop_total_difference_moneytime\n\n@anvil.server.callable\ndef initialize_pop_money_values():\n    \"\"\"Reset population money values to default in the session.\"\"\"\n    anvil.server.session[\"pop_money_values\"] = DEFAULT_POP_MONEY_VALUES.copy()\n\n@anvil.server.callable\ndef update_pop_money_values(updated_values):\n    \"\"\"Update the session with new population money values.\"\"\"\n    anvil.server.session[\"pop_money_values\"] = updated_values\n\n@anvil.server.callable\ndef get_pop_money_values():\n    \"\"\"Get the current population money values from the session.\"\"\"\n    return anvil.server.session.get(\"pop_money_values\", DEFAULT_POP_MONEY_VALUES)"
  id: '1713356173952574658945596.464'
  name: ServerModule1
services:
- client_config: {}
  server_config: {}
  source: /runtime/services/tables.yml
- client_config: {}
  server_config: {}
  source: /runtime/services/anvil/files.yml
startup: {module: Homepage, type: form}
startup_form: null
theme:
  assets:
  - {content: ZnJvbSA=, id: DVKUDKDCDFXWXDW4WRBYRLLG3D4RHJMF, name: standard-page.html}
  - {content: , id: GFAPW7ZZINFMCWL3CEL432P2EWRQLVTQ, name: theme.css}
  parameters:
    color_scheme:
      colors:
      - {color: '#6750A4', name: Primary}
      - {color: '#EADDFF', name: Primary Container}
      - {color: '#FFFFFF', name: On Primary}
      - {color: '#21005E', name: On Primary Container}
      - {color: '#625B71', name: Secondary}
      - {color: '#E8DEF8', name: Secondary Container}
      - {color: '#FFFFFF', name: On Secondary}
      - {color: '#1E192B', name: On Secondary Container}
      - {color: '#7D5260', name: Tertiary}
      - {color: '#FFD8E4', name: Tertiary Container}
      - {color: '#FFFFFF', name: On Tertiary}
      - {color: '#370B1E', name: On Tertiary Container}
      - {color: '#B3261E', name: Error}
      - {color: '#FFFBFE', name: Background}
      - {color: '#FFFBFE', name: Surface}
      - {color: '#1C1B1F', name: On Background}
      - {color: '#1C1B1F', name: On Surface}
      - {color: '#E7E0EC', name: Surface Variant}
      - {color: '#49454E', name: On Surface Variant}
      - {color: '#79747E', name: Outline}
      - {color: 'rgba(28, 27, 31, 0.38)', name: On Disabled}
      - {color: 'rgba(28, 27, 31, 0.12)', name: Disabled Container}
      - {color: 'rgba(255, 255, 255, 0.08)', name: Light Overlay 1}
      - {color: 'rgba(255, 255, 255, 0.12)', name: Light Overlay 2}
      - {color: 'rgba(30, 25, 43, 0.08)', name: Dark Overlay 1}
      - {color: 'rgba(30, 25, 43, 0.12)', name: Dark Overlay 2}
      - {color: 'rgba(103, 80, 164, 0.05)', name: Primary Overlay 1}
      - {color: 'rgba(103, 80, 164, 0.08)', name: Primary Overlay 2}
      - {color: 'rgba(103, 80, 164, 0.11)', name: Primary Overlay 3}
      preset_groups:
      - name: Colour Scheme
        options:
        - colors:
          - {color: '#6750A4', name: Primary}
          - {color: '#EADDFF', name: Primary Container}
          - {color: '#FFFFFF', name: On Primary}
          - {color: '#21005E', name: On Primary Container}
          - {color: '#625B71', name: Secondary}
          - {color: '#E8DEF8', name: Secondary Container}
          - {color: '#FFFFFF', name: On Secondary}
          - {color: '#1E192B', name: On Secondary Container}
          - {color: '#7D5260', name: Tertiary}
          - {color: '#FFD8E4', name: Tertiary Container}
          - {color: '#FFFFFF', name: On Tertiary}
          - {color: '#370B1E', name: On Tertiary Container}
          - {color: '#B3261E', name: Error}
          - {color: '#FFFBFE', name: Background}
          - {color: '#FFFBFE', name: Surface}
          - {color: '#1C1B1F', name: On Background}
          - {color: '#1C1B1F', name: On Surface}
          - {color: '#E7E0EC', name: Surface Variant}
          - {color: '#49454E', name: On Surface Variant}
          - {color: '#79747E', name: Outline}
          - {color: 'rgba(28, 27, 31, 0.38)', name: On Disabled}
          - {color: 'rgba(28, 27, 31, 0.12)', name: Disabled Container}
          - {color: 'rgba(255, 255, 255, 0.08)', name: Light Overlay 1}
          - {color: 'rgba(255, 255, 255, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(30, 25, 43, 0.08)', name: Dark Overlay 1}
          - {color: 'rgba(30, 25, 43, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(103, 80, 164, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(103, 80, 164, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(103, 80, 164, 0.11)', name: Primary Overlay 3}
          name: Material Light
        - colors:
          - {color: '#D0BCFF', name: Primary}
          - {color: '#4F378B', name: Primary Container}
          - {color: '#371E73', name: On Primary}
          - {color: '#EADDFF', name: On Primary Container}
          - {color: '#CCC2DC', name: Secondary}
          - {color: '#4A4458', name: Secondary Container}
          - {color: '#332D41', name: On Secondary}
          - {color: '#E8DEF8', name: On Secondary Container}
          - {color: '#EFB8C8', name: Tertiary}
          - {color: '#633B48', name: Tertiary Container}
          - {color: '#492532', name: On Tertiary}
          - {color: '#FFD8E4', name: On Tertiary Container}
          - {color: '#F2B8B5', name: Error}
          - {color: '#1C1B1F', name: Background}
          - {color: '#1C1B1F', name: Surface}
          - {color: '#E6E1E5', name: On Background}
          - {color: '#E6E1E5', name: On Surface}
          - {color: '#49454F', name: Surface Variant}
          - {color: '#CAC4D0', name: On Surface Variant}
          - {color: '#938F99', name: Outline}
          - {color: 'rgba(230, 225, 229, 0.38)', name: On Disabled}
          - {color: 'rgba(230, 225, 229, 0.12)', name: Disabled Container}
          - {color: 'rgba(232, 222, 248, 0.08)', name: Light Overlay 1}
          - {color: 'rgba(232, 222, 248, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(232, 222, 248, 0.08)', name: Dark Overlay 1}
          - {color: 'rgba(232, 222, 248, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(208, 188, 255, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(208, 188, 255, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(208, 188, 255, 0.11)', name: Primary Overlay 3}
          name: Material Dark
        - colors:
          - {color: '#1EB980', name: Primary}
          - {color: '#005235', name: Primary Container}
          - {color: '#003824', name: On Primary}
          - {color: '#73FBBC', name: On Primary Container}
          - {color: '#B4CCBC', name: Secondary}
          - {color: '#364B3F', name: Secondary Container}
          - {color: '#20352A', name: On Secondary}
          - {color: '#D0E8D8', name: On Secondary Container}
          - {color: '#A4CDDD', name: Tertiary}
          - {color: '#234C5A', name: Tertiary Container}
          - {color: '#063542', name: On Tertiary}
          - {color: '#C0E9FA', name: On Tertiary Container}
          - {color: '#D64D47', name: Error}
          - {color: '#191C1A', name: Background}
          - {color: '#191C1A', name: Surface}
          - {color: '#E1E3DF', name: On Background}
          - {color: '#E1E3DF', name: On Surface}
          - {color: '#404943', name: Surface Variant}
          - {color: '#C0C9C1', name: On Surface Variant}
          - {color: '#8A938C', name: Outline}
          - {color: 'rgba(208, 232, 216, 0.2)', name: Dark Overlay 1}
          - {color: 'rgba(208, 232, 216, 0.5)', name: Dark Overlay 2}
          - {color: 'rgba(208, 232, 216, 0.2)', name: Light Overlay 1}
          - {color: 'rgba(208, 232, 216, 0.5)', name: Light Overlay 2}
          - {color: 'rgba(133, 133, 139, 0.12)', name: Disabled Container}
          - {color: '#85858B', name: On Disabled}
          - {color: 'rgba(30, 185, 128, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(30, 185, 128, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(30, 185, 128, 0.11)', name: Primary Overlay 3}
          name: Rally Dark
        - colors:
          - {color: '#006C48', name: Primary}
          - {color: '#00A36C', name: Primary Container}
          - {color: '#FFFFFF', name: On Primary}
          - {color: '#002113', name: On Primary Container}
          - {color: '#496455', name: Secondary}
          - {color: '#CBEAD6', name: Secondary Container}
          - {color: '#FFFFFF', name: On Secondary}
          - {color: '#052014', name: On Secondary Container}
          - {color: '#326576', name: Tertiary}
          - {color: '#B8EAFF', name: Tertiary Container}
          - {color: '#FFFFFF', name: On Tertiary}
          - {color: '#001F28', name: On Tertiary Container}
          - {color: '#D64D47', name: Error}
          - {color: '#FBFDF8', name: Background}
          - {color: '#FBFDF8', name: Surface}
          - {color: '#191C1A', name: On Background}
          - {color: '#191C1A', name: On Surface}
          - {color: '#DCE5DD', name: Surface Variant}
          - {color: '#404943', name: On Surface Variant}
          - {color: '#707973', name: Outline}
          - {color: 'rgba(5, 32, 20, 0.8)', name: Dark Overlay 1}
          - {color: 'rgba(51, 51, 61, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(255, 255, 255, 0.8)', name: Light Overlay 1}
          - {color: 'rgba(255, 255, 255, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(25, 28, 26, 0.12)', name: Disabled Container}
          - {color: 'rgba(25, 28, 26, 0.38)', name: On Disabled}
          - {color: 'rgba(0, 108, 72, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(0, 108, 72, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(0, 108, 72, 0.11)', name: Primary Overlay 3}
          name: Rally Light
        - colors:
          - {color: '#006874', name: Primary}
          - {color: '#96F0FF', name: Primary Container}
          - {color: '#FFFFFF', name: On Primary}
          - {color: '#001F24', name: On Primary Container}
          - {color: '#486367', name: Secondary}
          - {color: '#CBE8ED', name: Secondary Container}
          - {color: '#FFFFFF', name: On Secondary}
          - {color: '#031F23', name: On Secondary Container}
          - {color: '#515E80', name: Tertiary}
          - {color: '#DAE2FF', name: Tertiary Container}
          - {color: '#FFFFFF', name: On Tertiary}
          - {color: '#0C1A39', name: On Tertiary Container}
          - {color: '#BA1A1A', name: Error}
          - {color: '#FAFDFD', name: Background}
          - {color: '#FAFDFD', name: Surface}
          - {color: '#191C1D', name: On Background}
          - {color: '#191C1D', name: On Surface}
          - {color: '#DBE4E6', name: Surface Variant}
          - {color: '#3F484A', name: On Surface Variant}
          - {color: '#6F797A', name: Outline}
          - {color: 'rgba(25, 28, 29, 0.38)', name: On Disabled}
          - {color: 'rgba(25, 28, 29, 0.12)', name: Disabled Container}
          - {color: 'rgba(255, 255, 255, 0.08)', name: Light Overlay 1}
          - {color: 'rgba(255, 255, 255, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(3, 31, 35, 0.08)', name: Dark Overlay 1}
          - {color: 'rgba(3, 31, 35, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(0, 104, 116, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(0, 104, 116, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(0, 104, 116, 0.11)', name: Primary Overlay 3}
          name: Mykonos Light
        - colors:
          - {color: '#3CD9ED', name: Primary}
          - {color: '#004F57', name: Primary Container}
          - {color: '#00363D', name: On Primary}
          - {color: '#96F0FF', name: On Primary Container}
          - {color: '#AFCBD0', name: Secondary}
          - {color: '#314B4F', name: Secondary Container}
          - {color: '#1A3438', name: On Secondary}
          - {color: '#CBE8ED', name: On Secondary Container}
          - {color: '#B9C6ED', name: Tertiary}
          - {color: '#394667', name: Tertiary Container}
          - {color: '#23304F', name: On Tertiary}
          - {color: '##DAE2FF', name: On Tertiary Container}
          - {color: '#FFB4AB', name: Error}
          - {color: '#191C1D', name: Background}
          - {color: '#191C1D', name: Surface}
          - {color: '#E1E3E3', name: On Background}
          - {color: '#E1E3E3', name: On Surface}
          - {color: '#3F484A', name: Surface Variant}
          - {color: '#BFC8CA', name: On Surface Variant}
          - {color: '#899294', name: Outline}
          - {color: 'rgba(225, 227, 227, 0.38)', name: On Disabled}
          - {color: 'rgba(225, 227, 227, 0.12)', name: Disabled Container}
          - {color: 'rgba(203, 232, 237, 0.08)', name: Light Overlay 1}
          - {color: 'rgba(203, 232, 237, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(203, 232, 237, 0.08)', name: Dark Overlay 1}
          - {color: 'rgba(203, 232, 237, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(60, 217, 237, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(60, 217, 237, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(60, 217, 237, 0.11)', name: Primary Overlay 3}
          name: Mykonos Dark
        - colors:
          - {color: '#9A4523', name: Primary}
          - {color: '#FFDBCF', name: Primary Container}
          - {color: '#FFFFFF', name: On Primary}
          - {color: '#380D00', name: On Primary Container}
          - {color: '#77574C', name: Secondary}
          - {color: '#FFDBCF', name: Secondary Container}
          - {color: '#FFFFFF', name: On Secondary}
          - {color: '#2C160D', name: On Secondary Container}
          - {color: '#695E2F', name: Tertiary}
          - {color: '#F2E2A7', name: Tertiary Container}
          - {color: '#FFFFFF', name: On Tertiary}
          - {color: '#221B00', name: On Tertiary Container}
          - {color: '#BA1A1A', name: Error}
          - {color: '#FFFBFF', name: Background}
          - {color: '#FFFBFF', name: Surface}
          - {color: '#201A18', name: On Background}
          - {color: '#201A18', name: On Surface}
          - {color: '#F5DED6', name: Surface Variant}
          - {color: '#53433E', name: On Surface Variant}
          - {color: '#85736D', name: Outline}
          - {color: 'rgba(32, 26, 24, 0.38)', name: On Disabled}
          - {color: 'rgba(32, 26, 24, 0.12)', name: Disabled Container}
          - {color: 'rgba(255, 255, 255, 0.08)', name: Light Overlay 1}
          - {color: 'rgba(255, 255, 255, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(44, 22, 13, 0.08)', name: Dark Overlay 1}
          - {color: 'rgba(44, 22, 13, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(154, 69, 35, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(154, 69, 35, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(154, 69, 35, 0.11)', name: Primary Overlay 3}
          name: Manarola Light
        - colors:
          - {color: '#FFB59B', name: Primary}
          - {color: '#7B2E0E', name: Primary Container}
          - {color: '#5B1A00', name: On Primary}
          - {color: '#FFDBCF', name: On Primary Container}
          - {color: '#E7BDB0', name: Secondary}
          - {color: '#5D4036', name: Secondary Container}
          - {color: '#442A21', name: On Secondary}
          - {color: '#FFDBCF', name: On Secondary Container}
          - {color: '#D5C68E', name: Tertiary}
          - {color: '#50461A', name: Tertiary Container}
          - {color: '#393005', name: On Tertiary}
          - {color: '#F2E2A7', name: On Tertiary Container}
          - {color: '#FFB4AB', name: Error}
          - {color: '#201A18', name: Background}
          - {color: '#201A18', name: Surface}
          - {color: '#EDE0DC', name: On Background}
          - {color: '#EDE0DC', name: On Surface}
          - {color: '#53433E', name: Surface Variant}
          - {color: '#D8C2BB', name: On Surface Variant}
          - {color: '#A08D86', name: Outline}
          - {color: 'rgba(237, 224, 220, 0.38)', name: On Disabled}
          - {color: 'rgba(237, 224, 220, 0.12)', name: Disabled Container}
          - {color: 'rgba(255, 219, 207, 0.08)', name: Light Overlay 1}
          - {color: 'rgba(255, 219, 207, 0.12)', name: Light Overlay 2}
          - {color: 'rgba(255, 219, 207, 0.08)', name: Dark Overlay 1}
          - {color: 'rgba(255, 219, 207, 0.12)', name: Dark Overlay 2}
          - {color: 'rgba(255, 181, 155, 0.05)', name: Primary Overlay 1}
          - {color: 'rgba(255, 181, 155, 0.08)', name: Primary Overlay 2}
          - {color: 'rgba(255, 181, 155, 0.11)', name: Primary Overlay 3}
          name: Manarola Dark
    roles:
    - components: [Label]
      name: input-prompt
    - components: [Link]
      name: selected
    - components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      display_in_toolbox: true
      name: outlined-card
      title: Outlined Card
    - components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      display_in_toolbox: false
      name: elevated-card
      title: Elevated Card
    - components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      display_in_toolbox: false
      name: tonal-card
      title: Tonal Card
    - components: [Button, FileLoader]
      display_in_toolbox: true
      name: outlined-button
      title: Outlined Button
    - components: [Button, FileLoader]
      display_in_toolbox: false
      name: filled-button
      title: Filled Button
    - components: [Button, FileLoader]
      display_in_toolbox: false
      name: elevated-button
      title: Elevated Button
    - components: [Button, FileLoader]
      display_in_toolbox: false
      name: tonal-button
      title: Tonal Button
    - components: [TextBox, TextArea, DatePicker, DropDown]
      display_in_toolbox: true
      name: outlined
      title: Outlined TextBox
    - components: [Label, Link]
      name: display
    - components: [Label, Link]
      name: headline
    - components: [Label, Link]
      name: title
    - components: [Label, Link]
      name: body
    - components: [DataGrid]
      name: tonal-data-grid
    - components: [TextBox, TextArea, DatePicker, DropDown]
      name: outlined-error
    - components: [TextBox, TextArea, DatePicker, DropDown]
      name: input-error
  templates:
  - description: A page with an app bar and an optional sidebar.
    form:
      class_name: Form
      code: "from ._anvil_designer import $NAME$Template\nfrom anvil import *\n\nclass $NAME$($NAME$Template):\n\n  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\n    # Any code you write here will run before the form opens.\n    \n"
      components:
      - layout_properties: {slot: default}
        name: content_panel
        properties: {}
        type: ColumnPanel
      - layout_properties: {slot: nav-right}
        name: navbar_links
        properties: {}
        type: FlowPanel
      container:
        properties: {html: '@theme:standard-page.html'}
        type: HtmlTemplate
      is_package: true
    img: img/form-templates/material-design-3.png
    name: Standard Page
